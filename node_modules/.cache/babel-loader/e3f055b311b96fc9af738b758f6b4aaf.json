{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Asus/Desktop/deplo2/Lf-deployment/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Asus/Desktop/deplo2/Lf-deployment/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _defineProperty from \"C:/Users/Asus/Desktop/deplo2/Lf-deployment/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _createClass from \"C:/Users/Asus/Desktop/deplo2/Lf-deployment/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/Users/Asus/Desktop/deplo2/Lf-deployment/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"C:/Users/Asus/Desktop/deplo2/Lf-deployment/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Asus/Desktop/deplo2/Lf-deployment/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _wrapNativeSuper from \"C:/Users/Asus/Desktop/deplo2/Lf-deployment/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js\";\nimport _slicedToArray from \"C:/Users/Asus/Desktop/deplo2/Lf-deployment/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toArray from \"C:/Users/Asus/Desktop/deplo2/Lf-deployment/node_modules/@babel/runtime/helpers/esm/toArray.js\";\nimport _createForOfIteratorHelper from \"C:/Users/Asus/Desktop/deplo2/Lf-deployment/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"C:/Users/Asus/Desktop/deplo2/Lf-deployment/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\n\n/**\r\n * @remix-run/router v1.4.0\r\n *\r\n * Copyright (c) Remix Software Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE.md file in the root directory of this source tree.\r\n *\r\n * @license MIT\r\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n} ////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\r\n * Actions represent the type of change to a location value.\r\n */\n\n\nvar Action;\n\n(function (Action) {\n  /**\r\n   * A POP indicates a change to an arbitrary index in the history stack, such\r\n   * as a back or forward navigation. It does not describe the direction of the\r\n   * navigation, only that the current index changed.\r\n   *\r\n   * Note: This is the default action for newly created history objects.\r\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\r\n   * A PUSH indicates a new entry being added to the history stack, such as when\r\n   * a link is clicked and a new page loads. When this happens, all subsequent\r\n   * entries in the stack are lost.\r\n   */\n\n  Action[\"Push\"] = \"PUSH\";\n  /**\r\n   * A REPLACE indicates the entry at the current index in the history stack\r\n   * being replaced by a new one.\r\n   */\n\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\n\nvar PopStateEventType = \"popstate\";\n/**\r\n * Memory history stores the current location in memory. It is designed for use\r\n * in stateful non-browser environments like tests and React Native.\r\n */\n\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options = options,\n      _options$initialEntri = _options.initialEntries,\n      initialEntries = _options$initialEntri === void 0 ? [\"/\"] : _options$initialEntri,\n      initialIndex = _options.initialIndex,\n      _options$v5Compat = _options.v5Compat,\n      v5Compat = _options$v5Compat === void 0 ? false : _options$v5Compat;\n  var entries; // Declare so we can access from createMemoryLocation\n\n  entries = initialEntries.map(function (entry, index) {\n    return createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined);\n  });\n  var index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  var action = Action.Pop;\n  var listener = null;\n\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n\n  function getCurrentLocation() {\n    return entries[index];\n  }\n\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n\n    var location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n\n  function createHref(to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  var history = {\n    get index() {\n      return index;\n    },\n\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getCurrentLocation();\n    },\n\n    createHref: createHref,\n    createURL: function createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation: function encodeLocation(to) {\n      var path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n    push: function push(to, state) {\n      action = Action.Push;\n      var nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n\n      if (v5Compat && listener) {\n        listener({\n          action: action,\n          location: nextLocation,\n          delta: 1\n        });\n      }\n    },\n    replace: function replace(to, state) {\n      action = Action.Replace;\n      var nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n\n      if (v5Compat && listener) {\n        listener({\n          action: action,\n          location: nextLocation,\n          delta: 0\n        });\n      }\n    },\n    go: function go(delta) {\n      action = Action.Pop;\n      var nextIndex = clampIndex(index + delta);\n      var nextLocation = entries[nextIndex];\n      index = nextIndex;\n\n      if (listener) {\n        listener({\n          action: action,\n          location: nextLocation,\n          delta: delta\n        });\n      }\n    },\n    listen: function listen(fn) {\n      listener = fn;\n      return function () {\n        listener = null;\n      };\n    }\n  };\n  return history;\n}\n/**\r\n * Browser history stores the location in regular URLs. This is the standard for\r\n * most web apps, but it requires some configuration on the server to ensure you\r\n * serve the same app at multiple URLs.\r\n *\r\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\r\n */\n\n\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createBrowserLocation(window, globalHistory) {\n    var _window$location = window.location,\n        pathname = _window$location.pathname,\n        search = _window$location.search,\n        hash = _window$location.hash;\n    return createLocation(\"\", {\n      pathname: pathname,\n      search: search,\n      hash: hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\r\n * Hash history stores the location in window.location.hash. This makes it ideal\r\n * for situations where you don't want to send the location to the server for\r\n * some reason, either because you do cannot configure it or the URL space is\r\n * reserved for something else.\r\n *\r\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\r\n */\n\n\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createHashLocation(window, globalHistory) {\n    var _parsePath = parsePath(window.location.hash.substr(1)),\n        _parsePath$pathname = _parsePath.pathname,\n        pathname = _parsePath$pathname === void 0 ? \"/\" : _parsePath$pathname,\n        _parsePath$search = _parsePath.search,\n        search = _parsePath$search === void 0 ? \"\" : _parsePath$search,\n        _parsePath$hash = _parsePath.hash,\n        hash = _parsePath$hash === void 0 ? \"\" : _parsePath$hash;\n\n    return createLocation(\"\", {\n      pathname: pathname,\n      search: search,\n      hash: hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createHashHref(window, to) {\n    var base = window.document.querySelector(\"base\");\n    var href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      var url = window.location.href;\n      var hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location, to) {\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\n\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\r\n * For browser-based histories, we combine the state and key into an object\r\n */\n\n\nfunction getHistoryState(location, index) {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index\n  };\n}\n/**\r\n * Creates a Location object with a unique key from the given Path\r\n */\n\n\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n\n  var location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state: state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n\n  return location;\n}\n/**\r\n * Creates a string URL path from the given pathname, search, and hash components.\r\n */\n\n\nfunction createPath(_ref) {\n  var _ref$pathname = _ref.pathname,\n      pathname = _ref$pathname === void 0 ? \"/\" : _ref$pathname,\n      _ref$search = _ref.search,\n      search = _ref$search === void 0 ? \"\" : _ref$search,\n      _ref$hash = _ref.hash,\n      hash = _ref$hash === void 0 ? \"\" : _ref$hash;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\r\n * Parses a string URL path into its separate pathname, search, and hash components.\r\n */\n\n\nfunction parsePath(path) {\n  var parsedPath = {};\n\n  if (path) {\n    var hashIndex = path.indexOf(\"#\");\n\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    var searchIndex = path.indexOf(\"?\");\n\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nfunction getUrlBasedHistory(getLocation, _createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options2 = options,\n      _options2$window = _options2.window,\n      window = _options2$window === void 0 ? document.defaultView : _options2$window,\n      _options2$v5Compat = _options2.v5Compat,\n      v5Compat = _options2$v5Compat === void 0 ? false : _options2$v5Compat;\n  var globalHistory = window.history;\n  var action = Action.Pop;\n  var listener = null;\n  var index = getIndex(); // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState(_extends({}, globalHistory.state, {\n      idx: index\n    }), \"\");\n  }\n\n  function getIndex() {\n    var state = globalHistory.state || {\n      idx: null\n    };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    var nextIndex = getIndex();\n    var delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n\n    if (listener) {\n      listener({\n        action: action,\n        location: history.location,\n        delta: delta\n      });\n    }\n  }\n\n  function push(to, state) {\n    action = Action.Push;\n    var location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex() + 1;\n    var historyState = getHistoryState(location, index);\n    var url = history.createHref(location); // try...catch because iOS limits us to 100 pushState calls :/\n\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({\n        action: action,\n        location: history.location,\n        delta: 1\n      });\n    }\n  }\n\n  function replace(to, state) {\n    action = Action.Replace;\n    var location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex();\n    var historyState = getHistoryState(location, index);\n    var url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({\n        action: action,\n        location: history.location,\n        delta: 0\n      });\n    }\n  }\n\n  function createURL(to) {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    var base = window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n    var href = typeof to === \"string\" ? to : createPath(to);\n    invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n    return new URL(href, base);\n  }\n\n  var history = {\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n\n    listen: function listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return function () {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref: function createHref(to) {\n      return _createHref(window, to);\n    },\n    createURL: createURL,\n    encodeLocation: function encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      var url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n    push: push,\n    replace: replace,\n    go: function go(n) {\n      return globalHistory.go(n);\n    }\n  };\n  return history;\n} //#endregion\n\n\nvar ResultType;\n\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\n\nvar immutableRouteKeys = new Set([\"lazy\", \"caseSensitive\", \"path\", \"id\", \"index\", \"children\"]);\n\nfunction isIndexRoute(route) {\n  return route.index === true;\n} // Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\n\n\nfunction convertRoutesToDataRoutes(routes, detectErrorBoundary, parentPath, manifest) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n\n  if (manifest === void 0) {\n    manifest = {};\n  }\n\n  return routes.map(function (route, index) {\n    var treePath = [].concat(_toConsumableArray(parentPath), [index]);\n    var id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!manifest[id], \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n\n    if (isIndexRoute(route)) {\n      var indexRoute = _extends({}, route, {\n        hasErrorBoundary: detectErrorBoundary(route),\n        id: id\n      });\n\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      var pathOrLayoutRoute = _extends({}, route, {\n        id: id,\n        hasErrorBoundary: detectErrorBoundary(route),\n        children: undefined\n      });\n\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(route.children, detectErrorBoundary, treePath, manifest);\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\r\n * Matches the given routes to a location and returns the match data.\r\n *\r\n * @see https://reactrouter.com/utils/match-routes\r\n */\n\n\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n\n  var location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  var pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  var branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  var matches = null;\n\n  for (var i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i], // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    safelyDecodeURI(pathname));\n  }\n\n  return matches;\n}\n\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n\n  var flattenRoute = function flattenRoute(route, index, relativePath) {\n    var meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route: route\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    var path = joinPaths([parentPath, meta.relativePath]);\n    var routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n\n    if (route.children && route.children.length > 0) {\n      invariant( // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    } // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n\n\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path: path,\n      score: computeScore(path, route.index),\n      routesMeta: routesMeta\n    });\n  };\n\n  routes.forEach(function (route, index) {\n    var _route$path; // coarse-grain check for optional params\n\n\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      var _iterator = _createForOfIteratorHelper(explodeOptionalSegments(route.path)),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var exploded = _step.value;\n          flattenRoute(route, index, exploded);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  });\n  return branches;\n}\n/**\r\n * Computes all combinations of optional path segments for a given path,\r\n * excluding combinations that are ambiguous and of lower priority.\r\n *\r\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\r\n * - `/one/three`\r\n * - `/one/:two/three`\r\n * - `/one/three/:four`\r\n * - `/one/three/:five`\r\n * - `/one/:two/three/:four`\r\n * - `/one/:two/three/:five`\r\n * - `/one/three/:four/:five`\r\n * - `/one/:two/three/:four/:five`\r\n */\n\n\nfunction explodeOptionalSegments(path) {\n  var segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  var _segments = _toArray(segments),\n      first = _segments[0],\n      rest = _segments.slice(1); // Optional path segments are denoted by a trailing `?`\n\n\n  var isOptional = first.endsWith(\"?\"); // Compute the corresponding required segment: `foo?` -> `foo`\n\n  var required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  var restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  var result = []; // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explodes _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n\n  result.push.apply(result, _toConsumableArray(restExploded.map(function (subpath) {\n    return subpath === \"\" ? required : [required, subpath].join(\"/\");\n  }))); // Then if this is an optional value, add all child versions without\n\n  if (isOptional) {\n    result.push.apply(result, _toConsumableArray(restExploded));\n  } // for absolute paths, ensure `/` instead of empty segment\n\n\n  return result.map(function (exploded) {\n    return path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded;\n  });\n}\n\nfunction rankRouteBranches(branches) {\n  branches.sort(function (a, b) {\n    return a.score !== b.score ? b.score - a.score // Higher score first\n    : compareIndexes(a.routesMeta.map(function (meta) {\n      return meta.childrenIndex;\n    }), b.routesMeta.map(function (meta) {\n      return meta.childrenIndex;\n    }));\n  });\n}\n\nvar paramRe = /^:\\w+$/;\nvar dynamicSegmentValue = 3;\nvar indexRouteValue = 2;\nvar emptySegmentValue = 1;\nvar staticSegmentValue = 10;\nvar splatPenalty = -2;\n\nvar isSplat = function isSplat(s) {\n  return s === \"*\";\n};\n\nfunction computeScore(path, index) {\n  var segments = path.split(\"/\");\n  var initialScore = segments.length;\n\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments.filter(function (s) {\n    return !isSplat(s);\n  }).reduce(function (score, segment) {\n    return score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue);\n  }, initialScore);\n}\n\nfunction compareIndexes(a, b) {\n  var siblings = a.length === b.length && a.slice(0, -1).every(function (n, i) {\n    return n === b[i];\n  });\n  return siblings ? // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\n\nfunction matchRouteBranch(branch, pathname) {\n  var routesMeta = branch.routesMeta;\n  var matchedParams = {};\n  var matchedPathname = \"/\";\n  var matches = [];\n\n  for (var i = 0; i < routesMeta.length; ++i) {\n    var meta = routesMeta[i];\n    var end = i === routesMeta.length - 1;\n    var remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    var match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end: end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    var route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route: route\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n/**\r\n * Returns a path with params interpolated.\r\n *\r\n * @see https://reactrouter.com/utils/generate-path\r\n */\n\n\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  var path = originalPath;\n\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  } // ensure `/` is added at the beginning if the path is absolute\n\n\n  var prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n  var segments = path.split(/\\/+/).map(function (segment, index, array) {\n    var isLastSegment = index === array.length - 1; // only apply the splat if it's the last segment\n\n    if (isLastSegment && segment === \"*\") {\n      var star = \"*\";\n      var starParam = params[star]; // Apply the splat\n\n      return starParam;\n    }\n\n    var keyMatch = segment.match(/^:(\\w+)(\\??)$/);\n\n    if (keyMatch) {\n      var _keyMatch = _slicedToArray(keyMatch, 3),\n          key = _keyMatch[1],\n          optional = _keyMatch[2];\n\n      var param = params[key];\n\n      if (optional === \"?\") {\n        return param == null ? \"\" : param;\n      }\n\n      if (param == null) {\n        invariant(false, \"Missing \\\":\" + key + \"\\\" param\");\n      }\n\n      return param;\n    } // Remove any optional markers from optional static segments\n\n\n    return segment.replace(/\\?$/g, \"\");\n  }) // Remove empty segments\n  .filter(function (segment) {\n    return !!segment;\n  });\n  return prefix + segments.join(\"/\");\n}\n/**\r\n * Performs pattern matching on a URL pathname and returns information about\r\n * the match.\r\n *\r\n * @see https://reactrouter.com/utils/match-path\r\n */\n\n\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n\n  var _compilePath = compilePath(pattern.path, pattern.caseSensitive, pattern.end),\n      _compilePath2 = _slicedToArray(_compilePath, 2),\n      matcher = _compilePath2[0],\n      paramNames = _compilePath2[1];\n\n  var match = pathname.match(matcher);\n  if (!match) return null;\n  var matchedPathname = match[0];\n  var pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  var captureGroups = match.slice(1);\n  var params = paramNames.reduce(function (memo, paramName, index) {\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      var splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\n    return memo;\n  }, {});\n  return {\n    params: params,\n    pathname: matchedPathname,\n    pathnameBase: pathnameBase,\n    pattern: pattern\n  };\n}\n\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n\n  if (end === void 0) {\n    end = true;\n  }\n\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  var paramNames = [];\n  var regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:(\\w+)/g, function (_, paramName) {\n    paramNames.push(paramName);\n    return \"/([^\\\\/]+)\";\n  });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n\n  var matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\r\n * @private\r\n */\n\n\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  } // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n\n\n  var startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  var nextChar = pathname.charAt(startIndex);\n\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\r\n * Returns a resolved path object relative to the given pathname.\r\n *\r\n * @see https://reactrouter.com/utils/resolve-path\r\n */\n\n\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n\n  var _ref3 = typeof to === \"string\" ? parsePath(to) : to,\n      toPathname = _ref3.pathname,\n      _ref3$search = _ref3.search,\n      search = _ref3$search === void 0 ? \"\" : _ref3$search,\n      _ref3$hash = _ref3.hash,\n      hash = _ref3$hash === void 0 ? \"\" : _ref3$hash;\n\n  var pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname: pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\n\nfunction resolvePathname(relativePath, fromPathname) {\n  var segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  var relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(function (segment) {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\r\n * @private\r\n *\r\n * When processing relative navigation we want to ignore ancestor routes that\r\n * do not contribute to the path, such that index/pathless layout routes don't\r\n * interfere.\r\n *\r\n * For example, when moving a route element into an index route and/or a\r\n * pathless layout route, relative link behavior contained within should stay\r\n * the same.  Both of the following examples should link back to the root:\r\n *\r\n *   <Route path=\"/\">\r\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\r\n *   </Route>\r\n *\r\n *   <Route path=\"/\">\r\n *     <Route path=\"accounts\">\r\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\r\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\r\n *       </Route\r\n *     </Route>\r\n *   </Route>\r\n */\n\n\nfunction getPathContributingMatches(matches) {\n  return matches.filter(function (match, index) {\n    return index === 0 || match.route.path && match.route.path.length > 0;\n  });\n}\n/**\r\n * @private\r\n */\n\n\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n\n  var to;\n\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n\n  var isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  var toPathname = isEmptyPath ? \"/\" : to.pathname;\n  var from; // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    var routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      var toSegments = toPathname.split(\"/\"); // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    } // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  var path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original \"to\" had one\n\n  var hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\"); // Or if this was a link to the current path which has a trailing slash\n\n  var hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n/**\r\n * @private\r\n */\n\n\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\r\n * @private\r\n */\n\n\nvar joinPaths = function joinPaths(paths) {\n  return paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n};\n/**\r\n * @private\r\n */\n\n\nvar normalizePathname = function normalizePathname(pathname) {\n  return pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n};\n/**\r\n * @private\r\n */\n\n\nvar normalizeSearch = function normalizeSearch(search) {\n  return !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n};\n/**\r\n * @private\r\n */\n\n\nvar normalizeHash = function normalizeHash(hash) {\n  return !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n};\n/**\r\n * This is a shortcut for creating `application/json` responses. Converts `data`\r\n * to JSON and sets the `Content-Type` header.\r\n */\n\n\nvar json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n\n  var responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  var headers = new Headers(responseInit.headers);\n\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers: headers\n  }));\n};\n\nvar AbortedDeferredError = /*#__PURE__*/function (_Error) {\n  _inherits(AbortedDeferredError, _Error);\n\n  var _super = _createSuper(AbortedDeferredError);\n\n  function AbortedDeferredError() {\n    _classCallCheck(this, AbortedDeferredError);\n\n    return _super.apply(this, arguments);\n  }\n\n  return _createClass(AbortedDeferredError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nvar DeferredData = /*#__PURE__*/function () {\n  function DeferredData(data, responseInit) {\n    var _this = this;\n\n    _classCallCheck(this, DeferredData);\n\n    this.pendingKeysSet = new Set();\n    this.subscribers = new Set();\n    this.deferredKeys = [];\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\"); // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n\n    var reject;\n    this.abortPromise = new Promise(function (_, r) {\n      return reject = r;\n    });\n    this.controller = new AbortController();\n\n    var onAbort = function onAbort() {\n      return reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    };\n\n    this.unlistenAbortSignal = function () {\n      return _this.controller.signal.removeEventListener(\"abort\", onAbort);\n    };\n\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce(function (acc, _ref) {\n      var _ref4 = _slicedToArray(_ref, 2),\n          key = _ref4[0],\n          value = _ref4[1];\n\n      return Object.assign(acc, _defineProperty({}, key, _this.trackPromise(key, value)));\n    }, {});\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  _createClass(DeferredData, [{\n    key: \"trackPromise\",\n    value: function trackPromise(key, value) {\n      var _this2 = this;\n\n      if (!(value instanceof Promise)) {\n        return value;\n      }\n\n      this.deferredKeys.push(key);\n      this.pendingKeysSet.add(key); // We store a little wrapper promise that will be extended with\n      // _data/_error props upon resolve/reject\n\n      var promise = Promise.race([value, this.abortPromise]).then(function (data) {\n        return _this2.onSettle(promise, key, null, data);\n      }, function (error) {\n        return _this2.onSettle(promise, key, error);\n      }); // Register rejection listeners to avoid uncaught promise rejections on\n      // errors or aborted deferred values\n\n      promise.catch(function () {});\n      Object.defineProperty(promise, \"_tracked\", {\n        get: function get() {\n          return true;\n        }\n      });\n      return promise;\n    }\n  }, {\n    key: \"onSettle\",\n    value: function onSettle(promise, key, error, data) {\n      if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n        this.unlistenAbortSignal();\n        Object.defineProperty(promise, \"_error\", {\n          get: function get() {\n            return error;\n          }\n        });\n        return Promise.reject(error);\n      }\n\n      this.pendingKeysSet.delete(key);\n\n      if (this.done) {\n        // Nothing left to abort!\n        this.unlistenAbortSignal();\n      }\n\n      if (error) {\n        Object.defineProperty(promise, \"_error\", {\n          get: function get() {\n            return error;\n          }\n        });\n        this.emit(false, key);\n        return Promise.reject(error);\n      }\n\n      Object.defineProperty(promise, \"_data\", {\n        get: function get() {\n          return data;\n        }\n      });\n      this.emit(false, key);\n      return data;\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(aborted, settledKey) {\n      this.subscribers.forEach(function (subscriber) {\n        return subscriber(aborted, settledKey);\n      });\n    }\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(fn) {\n      var _this3 = this;\n\n      this.subscribers.add(fn);\n      return function () {\n        return _this3.subscribers.delete(fn);\n      };\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      var _this4 = this;\n\n      this.controller.abort();\n      this.pendingKeysSet.forEach(function (v, k) {\n        return _this4.pendingKeysSet.delete(k);\n      });\n      this.emit(true);\n    }\n  }, {\n    key: \"resolveData\",\n    value: function () {\n      var _resolveData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(signal) {\n        var _this5 = this;\n\n        var aborted, onAbort;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                aborted = false;\n\n                if (this.done) {\n                  _context.next = 7;\n                  break;\n                }\n\n                onAbort = function onAbort() {\n                  return _this5.cancel();\n                };\n\n                signal.addEventListener(\"abort\", onAbort);\n                _context.next = 6;\n                return new Promise(function (resolve) {\n                  _this5.subscribe(function (aborted) {\n                    signal.removeEventListener(\"abort\", onAbort);\n\n                    if (aborted || _this5.done) {\n                      resolve(aborted);\n                    }\n                  });\n                });\n\n              case 6:\n                aborted = _context.sent;\n\n              case 7:\n                return _context.abrupt(\"return\", aborted);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function resolveData(_x) {\n        return _resolveData.apply(this, arguments);\n      }\n\n      return resolveData;\n    }()\n  }, {\n    key: \"done\",\n    get: function get() {\n      return this.pendingKeysSet.size === 0;\n    }\n  }, {\n    key: \"unwrappedData\",\n    get: function get() {\n      invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n      return Object.entries(this.data).reduce(function (acc, _ref2) {\n        var _ref5 = _slicedToArray(_ref2, 2),\n            key = _ref5[0],\n            value = _ref5[1];\n\n        return Object.assign(acc, _defineProperty({}, key, unwrapTrackedPromise(value)));\n      }, {});\n    }\n  }, {\n    key: \"pendingKeys\",\n    get: function get() {\n      return Array.from(this.pendingKeysSet);\n    }\n  }]);\n\n  return DeferredData;\n}();\n\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\n\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n\n  return value._data;\n}\n\nvar defer = function defer(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n\n  var responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  return new DeferredData(data, responseInit);\n};\n/**\r\n * A redirect response. Sets the status code and the `Location` header.\r\n * Defaults to \"302 Found\".\r\n */\n\n\nvar redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n\n  var responseInit = init;\n\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  var headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers: headers\n  }));\n};\n/**\r\n * @private\r\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\r\n */\n\n\nvar ErrorResponse = /*#__PURE__*/_createClass(function ErrorResponse(status, statusText, data, internal) {\n  _classCallCheck(this, ErrorResponse);\n\n  if (internal === void 0) {\n    internal = false;\n  }\n\n  this.status = status;\n  this.statusText = statusText || \"\";\n  this.internal = internal;\n\n  if (data instanceof Error) {\n    this.data = data.toString();\n    this.error = data;\n  } else {\n    this.data = data;\n  }\n});\n/**\r\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\r\n * Response thrown from an action/loader\r\n */\n\n\nfunction isRouteErrorResponse(error) {\n  return error != null && typeof error.status === \"number\" && typeof error.statusText === \"string\" && typeof error.internal === \"boolean\" && \"data\" in error;\n}\n\nvar validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nvar validMutationMethods = new Set(validMutationMethodsArr);\nvar validRequestMethodsArr = [\"get\"].concat(validMutationMethodsArr);\nvar validRequestMethods = new Set(validRequestMethodsArr);\nvar redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nvar redirectPreserveMethodStatusCodes = new Set([307, 308]);\nvar IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nvar IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nvar IDLE_BLOCKER = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined\n};\nvar ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\nvar isBrowser = typeof window !== \"undefined\" && typeof window.document !== \"undefined\" && typeof window.document.createElement !== \"undefined\";\nvar isServer = !isBrowser;\n\nvar defaultDetectErrorBoundary = function defaultDetectErrorBoundary(route) {\n  return Boolean(route.hasErrorBoundary);\n}; //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\r\n * Create a router and listen to history POP navigations\r\n */\n\n\nfunction createRouter(init) {\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  var detectErrorBoundary = init.detectErrorBoundary || defaultDetectErrorBoundary; // Routes keyed by ID\n\n  var manifest = {}; // Routes in tree format for matching\n\n  var dataRoutes = convertRoutesToDataRoutes(init.routes, detectErrorBoundary, undefined, manifest);\n  var inFlightDataRoutes; // Cleanup function for history\n\n  var unlistenHistory = null; // Externally-provided functions to call on all state changes\n\n  var subscribers = new Set(); // Externally-provided object to hold scroll restoration locations during routing\n\n  var savedScrollPositions = null; // Externally-provided function to get scroll restoration keys\n\n  var getScrollRestorationKey = null; // Externally-provided function to get current scroll position\n\n  var getScrollPosition = null; // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n\n  var initialScrollRestored = init.hydrationData != null;\n  var initialMatches = matchRoutes(dataRoutes, init.history.location, init.basename);\n  var initialErrors = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    var error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n\n    var _getShortCircuitMatch = getShortCircuitMatches(dataRoutes),\n        matches = _getShortCircuitMatch.matches,\n        route = _getShortCircuitMatch.route;\n\n    initialMatches = matches;\n    initialErrors = _defineProperty({}, route.id, error);\n  }\n\n  var initialized = // All initialMatches need to be loaded before we're ready.  If we have lazy\n  // functions around still then we'll need to run them in initialize()\n  !initialMatches.some(function (m) {\n    return m.route.lazy;\n  }) && ( // And we have to either have no loaders or have been provided hydrationData\n  !initialMatches.some(function (m) {\n    return m.route.loader;\n  }) || init.hydrationData != null);\n  var router;\n  var state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized: initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map()\n  }; // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n\n  var pendingAction = Action.Pop; // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n\n  var pendingPreventScrollReset = false; // AbortController for the active navigation\n\n  var pendingNavigationController; // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n\n  var isUninterruptedRevalidation = false; // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n\n  var isRevalidationRequired = false; // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n\n  var cancelledDeferredRoutes = []; // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n\n  var cancelledFetcherLoads = []; // AbortControllers for any in-flight fetchers\n\n  var fetchControllers = new Map(); // Track loads based on the order in which they started\n\n  var incrementingLoadId = 0; // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n\n  var pendingNavigationLoadId = -1; // Fetchers that triggered data reloads as a result of their actions\n\n  var fetchReloadIds = new Map(); // Fetchers that triggered redirect navigations from their actions\n\n  var fetchRedirectIds = new Set(); // Most recent href/match for fetcher.load calls for fetchers\n\n  var fetchLoadMatches = new Map(); // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n\n  var activeDeferreds = new Map(); // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n\n  var blockerFunctions = new Map(); // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n\n  var ignoreNextHistoryUpdate = false; // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(function (_ref) {\n      var historyAction = _ref.action,\n          location = _ref.location,\n          delta = _ref.delta; // Ignore this event if it was just us resetting the URL from a\n      // blocked POP navigation\n\n      if (ignoreNextHistoryUpdate) {\n        ignoreNextHistoryUpdate = false;\n        return;\n      }\n\n      warning(blockerFunctions.size === 0 || delta != null, \"You are trying to use a blocker on a POP navigation to a location \" + \"that was not created by @remix-run/router. This will fail silently in \" + \"production. This can happen if you are navigating outside the router \" + \"via `window.history.pushState`/`window.location.hash` instead of using \" + \"router navigation APIs.  This can also happen if you are using \" + \"createHashRouter and the user manually changes the URL.\");\n      var blockerKey = shouldBlockNavigation({\n        currentLocation: state.location,\n        nextLocation: location,\n        historyAction: historyAction\n      });\n\n      if (blockerKey && delta != null) {\n        // Restore the URL to match the current UI, but don't update router state\n        ignoreNextHistoryUpdate = true;\n        init.history.go(delta * -1); // Put the blocker into a blocked state\n\n        updateBlocker(blockerKey, {\n          state: \"blocked\",\n          location: location,\n          proceed: function proceed() {\n            updateBlocker(blockerKey, {\n              state: \"proceeding\",\n              proceed: undefined,\n              reset: undefined,\n              location: location\n            }); // Re-do the same POP navigation we just blocked\n\n            init.history.go(delta);\n          },\n          reset: function reset() {\n            deleteBlocker(blockerKey);\n            updateState({\n              blockers: new Map(router.state.blockers)\n            });\n          }\n        });\n        return;\n      }\n\n      return startNavigation(historyAction, location);\n    });\n\n    if (state.initialized) {\n      return router;\n    }\n\n    var lazyMatches = state.matches.filter(function (m) {\n      return m.route.lazy;\n    });\n\n    if (lazyMatches.length === 0) {\n      // Kick off initial data load if needed.  Use Pop to avoid modifying history\n      startNavigation(Action.Pop, state.location);\n      return router;\n    } // Load lazy modules, then kick off initial data load if needed\n\n\n    var lazyPromises = lazyMatches.map(function (m) {\n      return loadLazyRouteModule(m.route, detectErrorBoundary, manifest);\n    });\n    Promise.all(lazyPromises).then(function () {\n      var initialized = !state.matches.some(function (m) {\n        return m.route.loader;\n      }) || init.hydrationData != null;\n\n      if (initialized) {\n        // We already have required loaderData so we can just set initialized\n        updateState({\n          initialized: true\n        });\n      } else {\n        // We still need to kick off initial data loads\n        startNavigation(Action.Pop, state.location);\n      }\n    });\n    return router;\n  } // Clean up a router and it's side effects\n\n\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach(function (_, key) {\n      return deleteFetcher(key);\n    });\n    state.blockers.forEach(function (_, key) {\n      return deleteBlocker(key);\n    });\n  } // Subscribe to state updates for the router\n\n\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return function () {\n      return subscribers.delete(fn);\n    };\n  } // Update our state and notify the calling context of the change\n\n\n  function updateState(newState) {\n    state = _extends({}, state, newState);\n    subscribers.forEach(function (subscriber) {\n      return subscriber(state);\n    });\n  } // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n\n\n  function completeNavigation(location, newState) {\n    var _location$state, _location$state2; // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n\n\n    var isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    var actionData;\n\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    } // Always preserve any existing loaderData from re-used routes\n\n\n    var loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData; // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n\n    var _iterator2 = _createForOfIteratorHelper(blockerFunctions),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var _step2$value = _slicedToArray(_step2.value, 1),\n            key = _step2$value[0];\n\n        deleteBlocker(key);\n      } // Always respect the user flag.  Otherwise don't reset on mutation\n      // submission navigations unless they redirect\n\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    var preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;\n\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    updateState(_extends({}, newState, {\n      actionData: actionData,\n      loaderData: loaderData,\n      historyAction: pendingAction,\n      location: location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset: preventScrollReset,\n      blockers: new Map(state.blockers)\n    }));\n    if (isUninterruptedRevalidation) ;else if (pendingAction === Action.Pop) ;else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    } // Reset stateful navigation vars\n\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  } // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n\n\n  function navigate(_x2, _x3) {\n    return _navigate.apply(this, arguments);\n  } // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n\n\n  function _navigate() {\n    _navigate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(to, opts) {\n      var _normalizeNavigateOpt2, path, submission, error, currentLocation, nextLocation, userReplace, historyAction, preventScrollReset, blockerKey;\n\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(typeof to === \"number\")) {\n                _context2.next = 3;\n                break;\n              }\n\n              init.history.go(to);\n              return _context2.abrupt(\"return\");\n\n            case 3:\n              _normalizeNavigateOpt2 = normalizeNavigateOptions(to, opts), path = _normalizeNavigateOpt2.path, submission = _normalizeNavigateOpt2.submission, error = _normalizeNavigateOpt2.error;\n              currentLocation = state.location;\n              nextLocation = createLocation(state.location, path, opts && opts.state); // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n              // URL from window.location, so we need to encode it here so the behavior\n              // remains the same as POP and non-data-router usages.  new URL() does all\n              // the same encoding we'd get from a history.pushState/window.location read\n              // without having to touch history\n\n              nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));\n              userReplace = opts && opts.replace != null ? opts.replace : undefined;\n              historyAction = Action.Push;\n\n              if (userReplace === true) {\n                historyAction = Action.Replace;\n              } else if (userReplace === false) ;else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n                // By default on submissions to the current location we REPLACE so that\n                // users don't have to double-click the back button to get to the prior\n                // location.  If the user redirects to a different location from the\n                // action/loader this will be ignored and the redirect will be a PUSH\n                historyAction = Action.Replace;\n              }\n\n              preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n              blockerKey = shouldBlockNavigation({\n                currentLocation: currentLocation,\n                nextLocation: nextLocation,\n                historyAction: historyAction\n              });\n\n              if (!blockerKey) {\n                _context2.next = 15;\n                break;\n              }\n\n              // Put the blocker into a blocked state\n              updateBlocker(blockerKey, {\n                state: \"blocked\",\n                location: nextLocation,\n                proceed: function proceed() {\n                  updateBlocker(blockerKey, {\n                    state: \"proceeding\",\n                    proceed: undefined,\n                    reset: undefined,\n                    location: nextLocation\n                  }); // Send the same navigation through\n\n                  navigate(to, opts);\n                },\n                reset: function reset() {\n                  deleteBlocker(blockerKey);\n                  updateState({\n                    blockers: new Map(state.blockers)\n                  });\n                }\n              });\n              return _context2.abrupt(\"return\");\n\n            case 15:\n              _context2.next = 17;\n              return startNavigation(historyAction, nextLocation, {\n                submission: submission,\n                // Send through the formData serialization error if we have one so we can\n                // render at the right error boundary after we match routes\n                pendingError: error,\n                preventScrollReset: preventScrollReset,\n                replace: opts && opts.replace\n              });\n\n            case 17:\n              return _context2.abrupt(\"return\", _context2.sent);\n\n            case 18:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return _navigate.apply(this, arguments);\n  }\n\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    }); // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n\n    if (state.navigation.state === \"submitting\") {\n      return;\n    } // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n\n\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    } // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n\n\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  } // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n\n\n  function startNavigation(_x4, _x5, _x6) {\n    return _startNavigation.apply(this, arguments);\n  } // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n\n\n  function _startNavigation() {\n    _startNavigation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(historyAction, location, opts) {\n      var routesToUse, loadingNavigation, matches, _error, _getShortCircuitMatch2, notFoundMatches, _route, request, pendingActionData, pendingError, actionOutput, navigation, _yield$handleLoaders, shortCircuited, loaderData, errors;\n\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              // Abort any in-progress navigations and start a new one. Unset any ongoing\n              // uninterrupted revalidations unless told otherwise, since we want this\n              // new navigation to update history normally\n              pendingNavigationController && pendingNavigationController.abort();\n              pendingNavigationController = null;\n              pendingAction = historyAction;\n              isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true; // Save the current scroll position every time we start a new navigation,\n              // and track whether we should reset scroll on completion\n\n              saveScrollPosition(state.location, state.matches);\n              pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n              routesToUse = inFlightDataRoutes || dataRoutes;\n              loadingNavigation = opts && opts.overrideNavigation;\n              matches = matchRoutes(routesToUse, location, init.basename); // Short circuit with a 404 on the root error boundary if we match nothing\n\n              if (matches) {\n                _context3.next = 15;\n                break;\n              }\n\n              _error = getInternalRouterError(404, {\n                pathname: location.pathname\n              });\n              _getShortCircuitMatch2 = getShortCircuitMatches(routesToUse), notFoundMatches = _getShortCircuitMatch2.matches, _route = _getShortCircuitMatch2.route; // Cancel all pending deferred on 404s since we don't keep any routes\n\n              cancelActiveDeferreds();\n              completeNavigation(location, {\n                matches: notFoundMatches,\n                loaderData: {},\n                errors: _defineProperty({}, _route.id, _error)\n              });\n              return _context3.abrupt(\"return\");\n\n            case 15:\n              if (!(isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod)))) {\n                _context3.next = 18;\n                break;\n              }\n\n              completeNavigation(location, {\n                matches: matches\n              });\n              return _context3.abrupt(\"return\");\n\n            case 18:\n              // Create a controller/Request for this navigation\n              pendingNavigationController = new AbortController();\n              request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);\n\n              if (!(opts && opts.pendingError)) {\n                _context3.next = 24;\n                break;\n              }\n\n              // If we have a pendingError, it means the user attempted a GET submission\n              // with binary FormData so assign here and skip to handleLoaders.  That\n              // way we handle calling loaders above the boundary etc.  It's not really\n              // different from an actionError in that sense.\n              pendingError = _defineProperty({}, findNearestBoundary(matches).route.id, opts.pendingError);\n              _context3.next = 35;\n              break;\n\n            case 24:\n              if (!(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {\n                _context3.next = 35;\n                break;\n              }\n\n              _context3.next = 27;\n              return handleAction(request, location, opts.submission, matches, {\n                replace: opts.replace\n              });\n\n            case 27:\n              actionOutput = _context3.sent;\n\n              if (!actionOutput.shortCircuited) {\n                _context3.next = 30;\n                break;\n              }\n\n              return _context3.abrupt(\"return\");\n\n            case 30:\n              pendingActionData = actionOutput.pendingActionData;\n              pendingError = actionOutput.pendingActionError;\n              navigation = _extends({\n                state: \"loading\",\n                location: location\n              }, opts.submission);\n              loadingNavigation = navigation; // Create a GET request for the loaders\n\n              request = new Request(request.url, {\n                signal: request.signal\n              });\n\n            case 35:\n              _context3.next = 37;\n              return handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.replace, pendingActionData, pendingError);\n\n            case 37:\n              _yield$handleLoaders = _context3.sent;\n              shortCircuited = _yield$handleLoaders.shortCircuited;\n              loaderData = _yield$handleLoaders.loaderData;\n              errors = _yield$handleLoaders.errors;\n\n              if (!shortCircuited) {\n                _context3.next = 43;\n                break;\n              }\n\n              return _context3.abrupt(\"return\");\n\n            case 43:\n              // Clean up now that the action/loaders have completed.  Don't clean up if\n              // we short circuited because pendingNavigationController will have already\n              // been assigned to a new controller for the next navigation\n              pendingNavigationController = null;\n              completeNavigation(location, _extends({\n                matches: matches\n              }, pendingActionData ? {\n                actionData: pendingActionData\n              } : {}, {\n                loaderData: loaderData,\n                errors: errors\n              }));\n\n            case 45:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n    return _startNavigation.apply(this, arguments);\n  }\n\n  function handleAction(_x7, _x8, _x9, _x10, _x11) {\n    return _handleAction.apply(this, arguments);\n  } // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n\n\n  function _handleAction() {\n    _handleAction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(request, location, submission, matches, opts) {\n      var navigation, result, actionMatch, replace, boundaryMatch;\n      return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              interruptActiveLoads(); // Put us in a submitting state\n\n              navigation = _extends({\n                state: \"submitting\",\n                location: location\n              }, submission);\n              updateState({\n                navigation: navigation\n              }); // Call our action and get the result\n\n              actionMatch = getTargetMatch(matches, location);\n\n              if (!(!actionMatch.route.action && !actionMatch.route.lazy)) {\n                _context4.next = 8;\n                break;\n              }\n\n              result = {\n                type: ResultType.error,\n                error: getInternalRouterError(405, {\n                  method: request.method,\n                  pathname: location.pathname,\n                  routeId: actionMatch.route.id\n                })\n              };\n              _context4.next = 13;\n              break;\n\n            case 8:\n              _context4.next = 10;\n              return callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, detectErrorBoundary, router.basename);\n\n            case 10:\n              result = _context4.sent;\n\n              if (!request.signal.aborted) {\n                _context4.next = 13;\n                break;\n              }\n\n              return _context4.abrupt(\"return\", {\n                shortCircuited: true\n              });\n\n            case 13:\n              if (!isRedirectResult(result)) {\n                _context4.next = 18;\n                break;\n              }\n\n              if (opts && opts.replace != null) {\n                replace = opts.replace;\n              } else {\n                // If the user didn't explicity indicate replace behavior, replace if\n                // we redirected to the exact same location we're currently at to avoid\n                // double back-buttons\n                replace = result.location === state.location.pathname + state.location.search;\n              }\n\n              _context4.next = 17;\n              return startRedirectNavigation(state, result, {\n                submission: submission,\n                replace: replace\n              });\n\n            case 17:\n              return _context4.abrupt(\"return\", {\n                shortCircuited: true\n              });\n\n            case 18:\n              if (!isErrorResult(result)) {\n                _context4.next = 22;\n                break;\n              }\n\n              // Store off the pending error - we use it to determine which loaders\n              // to call and will commit it when we complete the navigation\n              boundaryMatch = findNearestBoundary(matches, actionMatch.route.id); // By default, all submissions are REPLACE navigations, but if the\n              // action threw an error that'll be rendered in an errorElement, we fall\n              // back to PUSH so that the user can use the back button to get back to\n              // the pre-submission form location to try again\n\n              if ((opts && opts.replace) !== true) {\n                pendingAction = Action.Push;\n              }\n\n              return _context4.abrupt(\"return\", {\n                // Send back an empty object we can use to clear out any prior actionData\n                pendingActionData: {},\n                pendingActionError: _defineProperty({}, boundaryMatch.route.id, result.error)\n              });\n\n            case 22:\n              if (!isDeferredResult(result)) {\n                _context4.next = 24;\n                break;\n              }\n\n              throw getInternalRouterError(400, {\n                type: \"defer-action\"\n              });\n\n            case 24:\n              return _context4.abrupt(\"return\", {\n                pendingActionData: _defineProperty({}, actionMatch.route.id, result.data)\n              });\n\n            case 25:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n    return _handleAction.apply(this, arguments);\n  }\n\n  function handleLoaders(_x12, _x13, _x14, _x15, _x16, _x17, _x18, _x19) {\n    return _handleLoaders.apply(this, arguments);\n  }\n\n  function _handleLoaders() {\n    _handleLoaders = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(request, location, matches, overrideNavigation, submission, replace, pendingActionData, pendingError) {\n      var loadingNavigation, navigation, activeSubmission, routesToUse, _getMatchesToLoad, _getMatchesToLoad2, matchesToLoad, revalidatingFetchers, actionData, _yield$callLoadersAnd, results, loaderResults, fetcherResults, redirect, _processLoaderData, loaderData, errors, didAbortFetchLoads;\n\n      return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              // Figure out the right navigation we want to use for data loading\n              loadingNavigation = overrideNavigation;\n\n              if (!loadingNavigation) {\n                navigation = _extends({\n                  state: \"loading\",\n                  location: location,\n                  formMethod: undefined,\n                  formAction: undefined,\n                  formEncType: undefined,\n                  formData: undefined\n                }, submission);\n                loadingNavigation = navigation;\n              } // If this was a redirect from an action we don't have a \"submission\" but\n              // we have it on the loading navigation so use that if available\n\n\n              activeSubmission = submission ? submission : loadingNavigation.formMethod && loadingNavigation.formAction && loadingNavigation.formData && loadingNavigation.formEncType ? {\n                formMethod: loadingNavigation.formMethod,\n                formAction: loadingNavigation.formAction,\n                formData: loadingNavigation.formData,\n                formEncType: loadingNavigation.formEncType\n              } : undefined;\n              routesToUse = inFlightDataRoutes || dataRoutes;\n              _getMatchesToLoad = getMatchesToLoad(init.history, state, matches, activeSubmission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, routesToUse, init.basename, pendingActionData, pendingError), _getMatchesToLoad2 = _slicedToArray(_getMatchesToLoad, 2), matchesToLoad = _getMatchesToLoad2[0], revalidatingFetchers = _getMatchesToLoad2[1]; // Cancel pending deferreds for no-longer-matched routes or routes we're\n              // about to reload.  Note that if this is an action reload we would have\n              // already cancelled all pending deferreds so this would be a no-op\n\n              cancelActiveDeferreds(function (routeId) {\n                return !(matches && matches.some(function (m) {\n                  return m.route.id === routeId;\n                })) || matchesToLoad && matchesToLoad.some(function (m) {\n                  return m.route.id === routeId;\n                });\n              }); // Short circuit if we have no loaders to run\n\n              if (!(matchesToLoad.length === 0 && revalidatingFetchers.length === 0)) {\n                _context5.next = 9;\n                break;\n              }\n\n              completeNavigation(location, _extends({\n                matches: matches,\n                loaderData: {},\n                // Commit pending error if we're short circuiting\n                errors: pendingError || null\n              }, pendingActionData ? {\n                actionData: pendingActionData\n              } : {}));\n              return _context5.abrupt(\"return\", {\n                shortCircuited: true\n              });\n\n            case 9:\n              // If this is an uninterrupted revalidation, we remain in our current idle\n              // state.  If not, we need to switch to our loading state and load data,\n              // preserving any new action data or existing action data (in the case of\n              // a revalidation interrupting an actionReload)\n              if (!isUninterruptedRevalidation) {\n                revalidatingFetchers.forEach(function (rf) {\n                  var fetcher = state.fetchers.get(rf.key);\n                  var revalidatingFetcher = {\n                    state: \"loading\",\n                    data: fetcher && fetcher.data,\n                    formMethod: undefined,\n                    formAction: undefined,\n                    formEncType: undefined,\n                    formData: undefined,\n                    \" _hasFetcherDoneAnything \": true\n                  };\n                  state.fetchers.set(rf.key, revalidatingFetcher);\n                });\n                actionData = pendingActionData || state.actionData;\n                updateState(_extends({\n                  navigation: loadingNavigation\n                }, actionData ? Object.keys(actionData).length === 0 ? {\n                  actionData: null\n                } : {\n                  actionData: actionData\n                } : {}, revalidatingFetchers.length > 0 ? {\n                  fetchers: new Map(state.fetchers)\n                } : {}));\n              }\n\n              pendingNavigationLoadId = ++incrementingLoadId;\n              revalidatingFetchers.forEach(function (rf) {\n                return fetchControllers.set(rf.key, pendingNavigationController);\n              });\n              _context5.next = 14;\n              return callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);\n\n            case 14:\n              _yield$callLoadersAnd = _context5.sent;\n              results = _yield$callLoadersAnd.results;\n              loaderResults = _yield$callLoadersAnd.loaderResults;\n              fetcherResults = _yield$callLoadersAnd.fetcherResults;\n\n              if (!request.signal.aborted) {\n                _context5.next = 20;\n                break;\n              }\n\n              return _context5.abrupt(\"return\", {\n                shortCircuited: true\n              });\n\n            case 20:\n              // Clean up _after_ loaders have completed.  Don't clean up if we short\n              // circuited because fetchControllers would have been aborted and\n              // reassigned to new controllers for the next navigation\n              revalidatingFetchers.forEach(function (rf) {\n                return fetchControllers.delete(rf.key);\n              }); // If any loaders returned a redirect Response, start a new REPLACE navigation\n\n              redirect = findRedirect(results);\n\n              if (!redirect) {\n                _context5.next = 26;\n                break;\n              }\n\n              _context5.next = 25;\n              return startRedirectNavigation(state, redirect, {\n                replace: replace\n              });\n\n            case 25:\n              return _context5.abrupt(\"return\", {\n                shortCircuited: true\n              });\n\n            case 26:\n              // Process and commit output from loaders\n              _processLoaderData = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds), loaderData = _processLoaderData.loaderData, errors = _processLoaderData.errors; // Wire up subscribers to update loaderData as promises settle\n\n              activeDeferreds.forEach(function (deferredData, routeId) {\n                deferredData.subscribe(function (aborted) {\n                  // Note: No need to updateState here since the TrackedPromise on\n                  // loaderData is stable across resolve/reject\n                  // Remove this instance if we were aborted or if promises have settled\n                  if (aborted || deferredData.done) {\n                    activeDeferreds.delete(routeId);\n                  }\n                });\n              });\n              markFetchRedirectsDone();\n              didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n              return _context5.abrupt(\"return\", _extends({\n                loaderData: loaderData,\n                errors: errors\n              }, didAbortFetchLoads || revalidatingFetchers.length > 0 ? {\n                fetchers: new Map(state.fetchers)\n              } : {}));\n\n            case 31:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n    return _handleLoaders.apply(this, arguments);\n  }\n\n  function getFetcher(key) {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  } // Trigger a fetcher load/submit for the given fetcher key\n\n\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n    var routesToUse = inFlightDataRoutes || dataRoutes;\n    var matches = matchRoutes(routesToUse, href, init.basename);\n\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: href\n      }));\n      return;\n    }\n\n    var _normalizeNavigateOpt = normalizeNavigateOptions(href, opts, true),\n        path = _normalizeNavigateOpt.path,\n        submission = _normalizeNavigateOpt.submission;\n\n    var match = getTargetMatch(matches, path);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    } // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n\n\n    fetchLoadMatches.set(key, {\n      routeId: routeId,\n      path: path\n    });\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  } // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n\n\n  function handleFetcherAction(_x20, _x21, _x22, _x23, _x24, _x25) {\n    return _handleFetcherAction.apply(this, arguments);\n  } // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n\n\n  function _handleFetcherAction() {\n    _handleFetcherAction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(key, routeId, path, match, requestMatches, submission) {\n      var _error2, existingFetcher, fetcher, abortController, fetchRequest, actionResult, loadingFetcher, nextLocation, revalidationRequest, routesToUse, matches, loadId, loadFetcher, _getMatchesToLoad3, _getMatchesToLoad4, matchesToLoad, revalidatingFetchers, _yield$callLoadersAnd2, results, loaderResults, fetcherResults, redirect, _processLoaderData2, loaderData, errors, doneFetcher, didAbortFetchLoads;\n\n      return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              interruptActiveLoads();\n              fetchLoadMatches.delete(key);\n\n              if (!(!match.route.action && !match.route.lazy)) {\n                _context6.next = 6;\n                break;\n              }\n\n              _error2 = getInternalRouterError(405, {\n                method: submission.formMethod,\n                pathname: path,\n                routeId: routeId\n              });\n              setFetcherError(key, routeId, _error2);\n              return _context6.abrupt(\"return\");\n\n            case 6:\n              // Put this fetcher into it's submitting state\n              existingFetcher = state.fetchers.get(key);\n              fetcher = _extends({\n                state: \"submitting\"\n              }, submission, {\n                data: existingFetcher && existingFetcher.data,\n                \" _hasFetcherDoneAnything \": true\n              });\n              state.fetchers.set(key, fetcher);\n              updateState({\n                fetchers: new Map(state.fetchers)\n              }); // Call the action for the fetcher\n\n              abortController = new AbortController();\n              fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);\n              fetchControllers.set(key, abortController);\n              _context6.next = 15;\n              return callLoaderOrAction(\"action\", fetchRequest, match, requestMatches, manifest, detectErrorBoundary, router.basename);\n\n            case 15:\n              actionResult = _context6.sent;\n\n              if (!fetchRequest.signal.aborted) {\n                _context6.next = 19;\n                break;\n              }\n\n              // We can delete this so long as we weren't aborted by ou our own fetcher\n              // re-submit which would have put _new_ controller is in fetchControllers\n              if (fetchControllers.get(key) === abortController) {\n                fetchControllers.delete(key);\n              }\n\n              return _context6.abrupt(\"return\");\n\n            case 19:\n              if (!isRedirectResult(actionResult)) {\n                _context6.next = 26;\n                break;\n              }\n\n              fetchControllers.delete(key);\n              fetchRedirectIds.add(key);\n              loadingFetcher = _extends({\n                state: \"loading\"\n              }, submission, {\n                data: undefined,\n                \" _hasFetcherDoneAnything \": true\n              });\n              state.fetchers.set(key, loadingFetcher);\n              updateState({\n                fetchers: new Map(state.fetchers)\n              });\n              return _context6.abrupt(\"return\", startRedirectNavigation(state, actionResult, {\n                isFetchActionRedirect: true\n              }));\n\n            case 26:\n              if (!isErrorResult(actionResult)) {\n                _context6.next = 29;\n                break;\n              }\n\n              setFetcherError(key, routeId, actionResult.error);\n              return _context6.abrupt(\"return\");\n\n            case 29:\n              if (!isDeferredResult(actionResult)) {\n                _context6.next = 31;\n                break;\n              }\n\n              throw getInternalRouterError(400, {\n                type: \"defer-action\"\n              });\n\n            case 31:\n              // Start the data load for current matches, or the next location if we're\n              // in the middle of a navigation\n              nextLocation = state.navigation.location || state.location;\n              revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);\n              routesToUse = inFlightDataRoutes || dataRoutes;\n              matches = state.navigation.state !== \"idle\" ? matchRoutes(routesToUse, state.navigation.location, init.basename) : state.matches;\n              invariant(matches, \"Didn't find any matches after fetcher action\");\n              loadId = ++incrementingLoadId;\n              fetchReloadIds.set(key, loadId);\n              loadFetcher = _extends({\n                state: \"loading\",\n                data: actionResult.data\n              }, submission, {\n                \" _hasFetcherDoneAnything \": true\n              });\n              state.fetchers.set(key, loadFetcher);\n              _getMatchesToLoad3 = getMatchesToLoad(init.history, state, matches, submission, nextLocation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, routesToUse, init.basename, _defineProperty({}, match.route.id, actionResult.data), undefined // No need to send through errors since we short circuit above\n              ), _getMatchesToLoad4 = _slicedToArray(_getMatchesToLoad3, 2), matchesToLoad = _getMatchesToLoad4[0], revalidatingFetchers = _getMatchesToLoad4[1]; // Put all revalidating fetchers into the loading state, except for the\n              // current fetcher which we want to keep in it's current loading state which\n              // contains it's action submission info + action data\n\n              revalidatingFetchers.filter(function (rf) {\n                return rf.key !== key;\n              }).forEach(function (rf) {\n                var staleKey = rf.key;\n                var existingFetcher = state.fetchers.get(staleKey);\n                var revalidatingFetcher = {\n                  state: \"loading\",\n                  data: existingFetcher && existingFetcher.data,\n                  formMethod: undefined,\n                  formAction: undefined,\n                  formEncType: undefined,\n                  formData: undefined,\n                  \" _hasFetcherDoneAnything \": true\n                };\n                state.fetchers.set(staleKey, revalidatingFetcher);\n                fetchControllers.set(staleKey, abortController);\n              });\n              updateState({\n                fetchers: new Map(state.fetchers)\n              });\n              _context6.next = 45;\n              return callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n\n            case 45:\n              _yield$callLoadersAnd2 = _context6.sent;\n              results = _yield$callLoadersAnd2.results;\n              loaderResults = _yield$callLoadersAnd2.loaderResults;\n              fetcherResults = _yield$callLoadersAnd2.fetcherResults;\n\n              if (!abortController.signal.aborted) {\n                _context6.next = 51;\n                break;\n              }\n\n              return _context6.abrupt(\"return\");\n\n            case 51:\n              fetchReloadIds.delete(key);\n              fetchControllers.delete(key);\n              revalidatingFetchers.forEach(function (r) {\n                return fetchControllers.delete(r.key);\n              });\n              redirect = findRedirect(results);\n\n              if (!redirect) {\n                _context6.next = 57;\n                break;\n              }\n\n              return _context6.abrupt(\"return\", startRedirectNavigation(state, redirect));\n\n            case 57:\n              // Process and commit output from loaders\n              _processLoaderData2 = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds), loaderData = _processLoaderData2.loaderData, errors = _processLoaderData2.errors;\n              doneFetcher = {\n                state: \"idle\",\n                data: actionResult.data,\n                formMethod: undefined,\n                formAction: undefined,\n                formEncType: undefined,\n                formData: undefined,\n                \" _hasFetcherDoneAnything \": true\n              };\n              state.fetchers.set(key, doneFetcher);\n              didAbortFetchLoads = abortStaleFetchLoads(loadId); // If we are currently in a navigation loading state and this fetcher is\n              // more recent than the navigation, we want the newer data so abort the\n              // navigation and complete it with the fetcher data\n\n              if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n                invariant(pendingAction, \"Expected pending action\");\n                pendingNavigationController && pendingNavigationController.abort();\n                completeNavigation(state.navigation.location, {\n                  matches: matches,\n                  loaderData: loaderData,\n                  errors: errors,\n                  fetchers: new Map(state.fetchers)\n                });\n              } else {\n                // otherwise just update with the fetcher data, preserving any existing\n                // loaderData for loaders that did not need to reload.  We have to\n                // manually merge here since we aren't going through completeNavigation\n                updateState(_extends({\n                  errors: errors,\n                  loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors)\n                }, didAbortFetchLoads ? {\n                  fetchers: new Map(state.fetchers)\n                } : {}));\n                isRevalidationRequired = false;\n              }\n\n            case 62:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n    return _handleFetcherAction.apply(this, arguments);\n  }\n\n  function handleFetcherLoader(_x26, _x27, _x28, _x29, _x30, _x31) {\n    return _handleFetcherLoader.apply(this, arguments);\n  }\n  /**\r\n   * Utility function to handle redirects returned from an action or loader.\r\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\r\n   * example:\r\n   *\r\n   *  - user is on /a\r\n   *  - user clicks a link to /b\r\n   *  - loader for /b redirects to /c\r\n   *\r\n   * In a non-JS app the browser would track the in-flight navigation to /b and\r\n   * then replace it with /c when it encountered the redirect response.  In\r\n   * the end it would only ever update the URL bar with /c.\r\n   *\r\n   * In client-side routing using pushState/replaceState, we aim to emulate\r\n   * this behavior and we also do not update history until the end of the\r\n   * navigation (including processed redirects).  This means that we never\r\n   * actually touch history until we've processed redirects, so we just use\r\n   * the history action from the original navigation (PUSH or REPLACE).\r\n   */\n\n\n  function _handleFetcherLoader() {\n    _handleFetcherLoader = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(key, routeId, path, match, matches, submission) {\n      var existingFetcher, loadingFetcher, abortController, fetchRequest, result, boundaryMatch, doneFetcher;\n      return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              existingFetcher = state.fetchers.get(key); // Put this fetcher into it's loading state\n\n              loadingFetcher = _extends({\n                state: \"loading\",\n                formMethod: undefined,\n                formAction: undefined,\n                formEncType: undefined,\n                formData: undefined\n              }, submission, {\n                data: existingFetcher && existingFetcher.data,\n                \" _hasFetcherDoneAnything \": true\n              });\n              state.fetchers.set(key, loadingFetcher);\n              updateState({\n                fetchers: new Map(state.fetchers)\n              }); // Call the loader for this fetcher route match\n\n              abortController = new AbortController();\n              fetchRequest = createClientSideRequest(init.history, path, abortController.signal);\n              fetchControllers.set(key, abortController);\n              _context7.next = 9;\n              return callLoaderOrAction(\"loader\", fetchRequest, match, matches, manifest, detectErrorBoundary, router.basename);\n\n            case 9:\n              result = _context7.sent;\n\n              if (!isDeferredResult(result)) {\n                _context7.next = 17;\n                break;\n              }\n\n              _context7.next = 13;\n              return resolveDeferredData(result, fetchRequest.signal, true);\n\n            case 13:\n              _context7.t0 = _context7.sent;\n\n              if (_context7.t0) {\n                _context7.next = 16;\n                break;\n              }\n\n              _context7.t0 = result;\n\n            case 16:\n              result = _context7.t0;\n\n            case 17:\n              // We can delete this so long as we weren't aborted by ou our own fetcher\n              // re-load which would have put _new_ controller is in fetchControllers\n              if (fetchControllers.get(key) === abortController) {\n                fetchControllers.delete(key);\n              }\n\n              if (!fetchRequest.signal.aborted) {\n                _context7.next = 20;\n                break;\n              }\n\n              return _context7.abrupt(\"return\");\n\n            case 20:\n              if (!isRedirectResult(result)) {\n                _context7.next = 24;\n                break;\n              }\n\n              _context7.next = 23;\n              return startRedirectNavigation(state, result);\n\n            case 23:\n              return _context7.abrupt(\"return\");\n\n            case 24:\n              if (!isErrorResult(result)) {\n                _context7.next = 29;\n                break;\n              }\n\n              boundaryMatch = findNearestBoundary(state.matches, routeId);\n              state.fetchers.delete(key); // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n              // do we need to behave any differently with our non-redirect errors?\n              // What if it was a non-redirect Response?\n\n              updateState({\n                fetchers: new Map(state.fetchers),\n                errors: _defineProperty({}, boundaryMatch.route.id, result.error)\n              });\n              return _context7.abrupt(\"return\");\n\n            case 29:\n              invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\"); // Put the fetcher back into an idle state\n\n              doneFetcher = {\n                state: \"idle\",\n                data: result.data,\n                formMethod: undefined,\n                formAction: undefined,\n                formEncType: undefined,\n                formData: undefined,\n                \" _hasFetcherDoneAnything \": true\n              };\n              state.fetchers.set(key, doneFetcher);\n              updateState({\n                fetchers: new Map(state.fetchers)\n              });\n\n            case 33:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n    return _handleFetcherLoader.apply(this, arguments);\n  }\n\n  function startRedirectNavigation(_x32, _x33, _x34) {\n    return _startRedirectNavigation.apply(this, arguments);\n  }\n\n  function _startRedirectNavigation() {\n    _startRedirectNavigation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(state, redirect, _temp) {\n      var _window, _ref6, submission, replace, isFetchActionRedirect, redirectLocation, url, isDifferentBasename, redirectHistoryAction, _state$navigation, formMethod, formAction, formEncType, formData;\n\n      return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _ref6 = _temp === void 0 ? {} : _temp, submission = _ref6.submission, replace = _ref6.replace, isFetchActionRedirect = _ref6.isFetchActionRedirect;\n\n              if (redirect.revalidate) {\n                isRevalidationRequired = true;\n              }\n\n              redirectLocation = createLocation(state.location, redirect.location, // TODO: This can be removed once we get rid of useTransition in Remix v2\n              _extends({\n                _isRedirect: true\n              }, isFetchActionRedirect ? {\n                _isFetchActionRedirect: true\n              } : {}));\n              invariant(redirectLocation, \"Expected a location on the redirect navigation\"); // Check if this an absolute external redirect that goes to a new origin\n\n              if (!(ABSOLUTE_URL_REGEX.test(redirect.location) && isBrowser && typeof ((_window = window) == null ? void 0 : _window.location) !== \"undefined\")) {\n                _context8.next = 10;\n                break;\n              }\n\n              url = init.history.createURL(redirect.location);\n              isDifferentBasename = stripBasename(url.pathname, init.basename || \"/\") == null;\n\n              if (!(window.location.origin !== url.origin || isDifferentBasename)) {\n                _context8.next = 10;\n                break;\n              }\n\n              if (replace) {\n                window.location.replace(redirect.location);\n              } else {\n                window.location.assign(redirect.location);\n              }\n\n              return _context8.abrupt(\"return\");\n\n            case 10:\n              // There's no need to abort on redirects, since we don't detect the\n              // redirect until the action/loaders have settled\n              pendingNavigationController = null;\n              redirectHistoryAction = replace === true ? Action.Replace : Action.Push; // Use the incoming submission if provided, fallback on the active one in\n              // state.navigation\n\n              _state$navigation = state.navigation, formMethod = _state$navigation.formMethod, formAction = _state$navigation.formAction, formEncType = _state$navigation.formEncType, formData = _state$navigation.formData;\n\n              if (!submission && formMethod && formAction && formData && formEncType) {\n                submission = {\n                  formMethod: formMethod,\n                  formAction: formAction,\n                  formEncType: formEncType,\n                  formData: formData\n                };\n              } // If this was a 307/308 submission we want to preserve the HTTP method and\n              // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n              // redirected location\n\n\n              if (!(redirectPreserveMethodStatusCodes.has(redirect.status) && submission && isMutationMethod(submission.formMethod))) {\n                _context8.next = 19;\n                break;\n              }\n\n              _context8.next = 17;\n              return startNavigation(redirectHistoryAction, redirectLocation, {\n                submission: _extends({}, submission, {\n                  formAction: redirect.location\n                }),\n                // Preserve this flag across redirects\n                preventScrollReset: pendingPreventScrollReset\n              });\n\n            case 17:\n              _context8.next = 21;\n              break;\n\n            case 19:\n              _context8.next = 21;\n              return startNavigation(redirectHistoryAction, redirectLocation, {\n                overrideNavigation: {\n                  state: \"loading\",\n                  location: redirectLocation,\n                  formMethod: submission ? submission.formMethod : undefined,\n                  formAction: submission ? submission.formAction : undefined,\n                  formEncType: submission ? submission.formEncType : undefined,\n                  formData: submission ? submission.formData : undefined\n                },\n                // Preserve this flag across redirects\n                preventScrollReset: pendingPreventScrollReset\n              });\n\n            case 21:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n    return _startRedirectNavigation.apply(this, arguments);\n  }\n\n  function callLoadersAndMaybeResolveData(_x35, _x36, _x37, _x38, _x39) {\n    return _callLoadersAndMaybeResolveData.apply(this, arguments);\n  }\n\n  function _callLoadersAndMaybeResolveData() {\n    _callLoadersAndMaybeResolveData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {\n      var results, loaderResults, fetcherResults;\n      return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.next = 2;\n              return Promise.all([].concat(_toConsumableArray(matchesToLoad.map(function (match) {\n                return callLoaderOrAction(\"loader\", request, match, matches, manifest, detectErrorBoundary, router.basename);\n              })), _toConsumableArray(fetchersToLoad.map(function (f) {\n                if (f.matches && f.match) {\n                  return callLoaderOrAction(\"loader\", createClientSideRequest(init.history, f.path, request.signal), f.match, f.matches, manifest, detectErrorBoundary, router.basename);\n                } else {\n                  var _error3 = {\n                    type: ResultType.error,\n                    error: getInternalRouterError(404, {\n                      pathname: f.path\n                    })\n                  };\n                  return _error3;\n                }\n              }))));\n\n            case 2:\n              results = _context9.sent;\n              loaderResults = results.slice(0, matchesToLoad.length);\n              fetcherResults = results.slice(matchesToLoad.length);\n              _context9.next = 7;\n              return Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, request.signal, false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(function (f) {\n                return f.match;\n              }), fetcherResults, request.signal, true)]);\n\n            case 7:\n              return _context9.abrupt(\"return\", {\n                results: results,\n                loaderResults: loaderResults,\n                fetcherResults: fetcherResults\n              });\n\n            case 8:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9);\n    }));\n    return _callLoadersAndMaybeResolveData.apply(this, arguments);\n  }\n\n  function interruptActiveLoads() {\n    var _cancelledDeferredRou;\n\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true; // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n\n    (_cancelledDeferredRou = cancelledDeferredRoutes).push.apply(_cancelledDeferredRou, _toConsumableArray(cancelActiveDeferreds())); // Abort in-flight fetcher loads\n\n\n    fetchLoadMatches.forEach(function (_, key) {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key, routeId, error) {\n    var boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: _defineProperty({}, boundaryMatch.route.id, error),\n      fetchers: new Map(state.fetchers)\n    });\n  }\n\n  function deleteFetcher(key) {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key) {\n    var controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys) {\n    var _iterator3 = _createForOfIteratorHelper(keys),\n        _step3;\n\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var key = _step3.value;\n        var fetcher = getFetcher(key);\n        var doneFetcher = {\n          state: \"idle\",\n          data: fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true\n        };\n        state.fetchers.set(key, doneFetcher);\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n  }\n\n  function markFetchRedirectsDone() {\n    var doneKeys = [];\n\n    var _iterator4 = _createForOfIteratorHelper(fetchRedirectIds),\n        _step4;\n\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var key = _step4.value;\n        var fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n\n        if (fetcher.state === \"loading\") {\n          fetchRedirectIds.delete(key);\n          doneKeys.push(key);\n        }\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId) {\n    var yeetedKeys = [];\n\n    var _iterator5 = _createForOfIteratorHelper(fetchReloadIds),\n        _step5;\n\n    try {\n      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n        var _step5$value = _slicedToArray(_step5.value, 2),\n            key = _step5$value[0],\n            id = _step5$value[1];\n\n        if (id < landedId) {\n          var fetcher = state.fetchers.get(key);\n          invariant(fetcher, \"Expected fetcher: \" + key);\n\n          if (fetcher.state === \"loading\") {\n            abortFetcher(key);\n            fetchReloadIds.delete(key);\n            yeetedKeys.push(key);\n          }\n        }\n      }\n    } catch (err) {\n      _iterator5.e(err);\n    } finally {\n      _iterator5.f();\n    }\n\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key, fn) {\n    var blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  } // Utility function to update blockers, ensuring valid state transitions\n\n\n  function updateBlocker(key, newBlocker) {\n    var blocker = state.blockers.get(key) || IDLE_BLOCKER; // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n\n    invariant(blocker.state === \"unblocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"proceeding\" || blocker.state === \"blocked\" && newBlocker.state === \"unblocked\" || blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\", \"Invalid blocker state transition: \" + blocker.state + \" -> \" + newBlocker.state);\n    state.blockers.set(key, newBlocker);\n    updateState({\n      blockers: new Map(state.blockers)\n    });\n  }\n\n  function shouldBlockNavigation(_ref2) {\n    var currentLocation = _ref2.currentLocation,\n        nextLocation = _ref2.nextLocation,\n        historyAction = _ref2.historyAction;\n\n    if (blockerFunctions.size === 0) {\n      return;\n    } // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n\n\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    var entries = Array.from(blockerFunctions.entries());\n\n    var _entries = _slicedToArray(entries[entries.length - 1], 2),\n        blockerKey = _entries[0],\n        blockerFunction = _entries[1];\n\n    var blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    } // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n\n\n    if (blockerFunction({\n      currentLocation: currentLocation,\n      nextLocation: nextLocation,\n      historyAction: historyAction\n    })) {\n      return blockerKey;\n    }\n  }\n\n  function cancelActiveDeferreds(predicate) {\n    var cancelledRouteIds = [];\n    activeDeferreds.forEach(function (dfd, routeId) {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  } // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n\n\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n\n    getScrollRestorationKey = getKey || function (location) {\n      return location.key;\n    }; // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n\n\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      var y = getSavedScrollPosition(state.location, state.matches);\n\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n\n    return function () {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      var userMatches = matches.map(function (m) {\n        return createUseMatchesMatch(m, state.loaderData);\n      });\n      var key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      var userMatches = matches.map(function (m) {\n        return createUseMatchesMatch(m, state.loaderData);\n      });\n      var key = getScrollRestorationKey(location, userMatches) || location.key;\n      var y = savedScrollPositions[key];\n\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n\n    return null;\n  }\n\n  function _internalSetRoutes(newRoutes) {\n    inFlightDataRoutes = newRoutes;\n  }\n\n  router = {\n    get basename() {\n      return init.basename;\n    },\n\n    get state() {\n      return state;\n    },\n\n    get routes() {\n      return dataRoutes;\n    },\n\n    initialize: initialize,\n    subscribe: subscribe,\n    enableScrollRestoration: enableScrollRestoration,\n    navigate: navigate,\n    fetch: fetch,\n    revalidate: revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: function createHref(to) {\n      return init.history.createHref(to);\n    },\n    encodeLocation: function encodeLocation(to) {\n      return init.history.encodeLocation(to);\n    },\n    getFetcher: getFetcher,\n    deleteFetcher: deleteFetcher,\n    dispose: dispose,\n    getBlocker: getBlocker,\n    deleteBlocker: deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes: _internalSetRoutes\n  };\n  return router;\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\n\nvar UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to createStaticHandler\");\n  var manifest = {};\n  var detectErrorBoundary = (opts == null ? void 0 : opts.detectErrorBoundary) || defaultDetectErrorBoundary;\n  var dataRoutes = convertRoutesToDataRoutes(routes, detectErrorBoundary, undefined, manifest);\n  var basename = (opts ? opts.basename : null) || \"/\";\n  /**\r\n   * The query() method is intended for document requests, in which we want to\r\n   * call an optional action and potentially multiple loaders for all nested\r\n   * routes.  It returns a StaticHandlerContext object, which is very similar\r\n   * to the router state (location, loaderData, actionData, errors, etc.) and\r\n   * also adds SSR-specific information such as the statusCode and headers\r\n   * from action/loaders Responses.\r\n   *\r\n   * It _should_ never throw and should report all errors through the\r\n   * returned context.errors object, properly associating errors to their error\r\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\r\n   * used to emulate React error boundaries during SSr by performing a second\r\n   * pass only down to the boundaryId.\r\n   *\r\n   * The one exception where we do not return a StaticHandlerContext is when a\r\n   * redirect response is returned or thrown from any action/loader.  We\r\n   * propagate that out and return the raw Response so the HTTP server can\r\n   * return it directly.\r\n   */\n\n  function query(_x40, _x41) {\n    return _query.apply(this, arguments);\n  }\n  /**\r\n   * The queryRoute() method is intended for targeted route requests, either\r\n   * for fetch ?_data requests or resource route requests.  In this case, we\r\n   * are only ever calling a single action or loader, and we are returning the\r\n   * returned value directly.  In most cases, this will be a Response returned\r\n   * from the action/loader, but it may be a primitive or other value as well -\r\n   * and in such cases the calling context should handle that accordingly.\r\n   *\r\n   * We do respect the throw/return differentiation, so if an action/loader\r\n   * throws, then this method will throw the value.  This is important so we\r\n   * can do proper boundary identification in Remix where a thrown Response\r\n   * must go to the Catch Boundary but a returned Response is happy-path.\r\n   *\r\n   * One thing to note is that any Router-initiated Errors that make sense\r\n   * to associate with a status code will be thrown as an ErrorResponse\r\n   * instance which include the raw Error, such that the calling context can\r\n   * serialize the error as they see fit while including the proper response\r\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\r\n   * any user-defined loaders.\r\n   */\n\n\n  function _query() {\n    _query = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(request, _temp2) {\n      var _ref7, requestContext, url, method, location, matches, error, _getShortCircuitMatch3, methodNotAllowedMatches, route, _error4, _getShortCircuitMatch4, notFoundMatches, _route2, result;\n\n      return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              _ref7 = _temp2 === void 0 ? {} : _temp2, requestContext = _ref7.requestContext;\n              url = new URL(request.url);\n              method = request.method.toLowerCase();\n              location = createLocation(\"\", createPath(url), null, \"default\");\n              matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n\n              if (!(!isValidMethod(method) && method !== \"head\")) {\n                _context10.next = 11;\n                break;\n              }\n\n              error = getInternalRouterError(405, {\n                method: method\n              });\n              _getShortCircuitMatch3 = getShortCircuitMatches(dataRoutes), methodNotAllowedMatches = _getShortCircuitMatch3.matches, route = _getShortCircuitMatch3.route;\n              return _context10.abrupt(\"return\", {\n                basename: basename,\n                location: location,\n                matches: methodNotAllowedMatches,\n                loaderData: {},\n                actionData: null,\n                errors: _defineProperty({}, route.id, error),\n                statusCode: error.status,\n                loaderHeaders: {},\n                actionHeaders: {},\n                activeDeferreds: null\n              });\n\n            case 11:\n              if (matches) {\n                _context10.next = 15;\n                break;\n              }\n\n              _error4 = getInternalRouterError(404, {\n                pathname: location.pathname\n              });\n              _getShortCircuitMatch4 = getShortCircuitMatches(dataRoutes), notFoundMatches = _getShortCircuitMatch4.matches, _route2 = _getShortCircuitMatch4.route;\n              return _context10.abrupt(\"return\", {\n                basename: basename,\n                location: location,\n                matches: notFoundMatches,\n                loaderData: {},\n                actionData: null,\n                errors: _defineProperty({}, _route2.id, _error4),\n                statusCode: _error4.status,\n                loaderHeaders: {},\n                actionHeaders: {},\n                activeDeferreds: null\n              });\n\n            case 15:\n              _context10.next = 17;\n              return queryImpl(request, location, matches, requestContext);\n\n            case 17:\n              result = _context10.sent;\n\n              if (!isResponse(result)) {\n                _context10.next = 20;\n                break;\n              }\n\n              return _context10.abrupt(\"return\", result);\n\n            case 20:\n              return _context10.abrupt(\"return\", _extends({\n                location: location,\n                basename: basename\n              }, result));\n\n            case 21:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10);\n    }));\n    return _query.apply(this, arguments);\n  }\n\n  function queryRoute(_x42, _x43) {\n    return _queryRoute.apply(this, arguments);\n  }\n\n  function _queryRoute() {\n    _queryRoute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(request, _temp3) {\n      var _ref8, routeId, requestContext, url, method, location, matches, match, result, error, _result$activeDeferre, data;\n\n      return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              _ref8 = _temp3 === void 0 ? {} : _temp3, routeId = _ref8.routeId, requestContext = _ref8.requestContext;\n              url = new URL(request.url);\n              method = request.method.toLowerCase();\n              location = createLocation(\"\", createPath(url), null, \"default\");\n              matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n\n              if (!(!isValidMethod(method) && method !== \"head\" && method !== \"options\")) {\n                _context11.next = 9;\n                break;\n              }\n\n              throw getInternalRouterError(405, {\n                method: method\n              });\n\n            case 9:\n              if (matches) {\n                _context11.next = 11;\n                break;\n              }\n\n              throw getInternalRouterError(404, {\n                pathname: location.pathname\n              });\n\n            case 11:\n              match = routeId ? matches.find(function (m) {\n                return m.route.id === routeId;\n              }) : getTargetMatch(matches, location);\n\n              if (!(routeId && !match)) {\n                _context11.next = 16;\n                break;\n              }\n\n              throw getInternalRouterError(403, {\n                pathname: location.pathname,\n                routeId: routeId\n              });\n\n            case 16:\n              if (match) {\n                _context11.next = 18;\n                break;\n              }\n\n              throw getInternalRouterError(404, {\n                pathname: location.pathname\n              });\n\n            case 18:\n              _context11.next = 20;\n              return queryImpl(request, location, matches, requestContext, match);\n\n            case 20:\n              result = _context11.sent;\n\n              if (!isResponse(result)) {\n                _context11.next = 23;\n                break;\n              }\n\n              return _context11.abrupt(\"return\", result);\n\n            case 23:\n              error = result.errors ? Object.values(result.errors)[0] : undefined;\n\n              if (!(error !== undefined)) {\n                _context11.next = 26;\n                break;\n              }\n\n              throw error;\n\n            case 26:\n              if (!result.actionData) {\n                _context11.next = 28;\n                break;\n              }\n\n              return _context11.abrupt(\"return\", Object.values(result.actionData)[0]);\n\n            case 28:\n              if (!result.loaderData) {\n                _context11.next = 32;\n                break;\n              }\n\n              data = Object.values(result.loaderData)[0];\n\n              if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) {\n                data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n              }\n\n              return _context11.abrupt(\"return\", data);\n\n            case 32:\n              return _context11.abrupt(\"return\", undefined);\n\n            case 33:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11);\n    }));\n    return _queryRoute.apply(this, arguments);\n  }\n\n  function queryImpl(_x44, _x45, _x46, _x47, _x48) {\n    return _queryImpl.apply(this, arguments);\n  }\n\n  function _queryImpl() {\n    _queryImpl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(request, location, matches, requestContext, routeMatch) {\n      var _result, result;\n\n      return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n              _context12.prev = 1;\n\n              if (!isMutationMethod(request.method.toLowerCase())) {\n                _context12.next = 7;\n                break;\n              }\n\n              _context12.next = 5;\n              return submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, routeMatch != null);\n\n            case 5:\n              _result = _context12.sent;\n              return _context12.abrupt(\"return\", _result);\n\n            case 7:\n              _context12.next = 9;\n              return loadRouteData(request, matches, requestContext, routeMatch);\n\n            case 9:\n              result = _context12.sent;\n              return _context12.abrupt(\"return\", isResponse(result) ? result : _extends({}, result, {\n                actionData: null,\n                actionHeaders: {}\n              }));\n\n            case 13:\n              _context12.prev = 13;\n              _context12.t0 = _context12[\"catch\"](1);\n\n              if (!isQueryRouteResponse(_context12.t0)) {\n                _context12.next = 19;\n                break;\n              }\n\n              if (!(_context12.t0.type === ResultType.error && !isRedirectResponse(_context12.t0.response))) {\n                _context12.next = 18;\n                break;\n              }\n\n              throw _context12.t0.response;\n\n            case 18:\n              return _context12.abrupt(\"return\", _context12.t0.response);\n\n            case 19:\n              if (!isRedirectResponse(_context12.t0)) {\n                _context12.next = 21;\n                break;\n              }\n\n              return _context12.abrupt(\"return\", _context12.t0);\n\n            case 21:\n              throw _context12.t0;\n\n            case 22:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee12, null, [[1, 13]]);\n    }));\n    return _queryImpl.apply(this, arguments);\n  }\n\n  function submit(_x49, _x50, _x51, _x52, _x53) {\n    return _submit.apply(this, arguments);\n  }\n\n  function _submit() {\n    _submit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(request, matches, actionMatch, requestContext, isRouteRequest) {\n      var result, error, method, _error5, boundaryMatch, _context13, loaderRequest, context;\n\n      return _regeneratorRuntime().wrap(function _callee13$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              if (!(!actionMatch.route.action && !actionMatch.route.lazy)) {\n                _context14.next = 7;\n                break;\n              }\n\n              error = getInternalRouterError(405, {\n                method: request.method,\n                pathname: new URL(request.url).pathname,\n                routeId: actionMatch.route.id\n              });\n\n              if (!isRouteRequest) {\n                _context14.next = 4;\n                break;\n              }\n\n              throw error;\n\n            case 4:\n              result = {\n                type: ResultType.error,\n                error: error\n              };\n              _context14.next = 13;\n              break;\n\n            case 7:\n              _context14.next = 9;\n              return callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, detectErrorBoundary, basename, true, isRouteRequest, requestContext);\n\n            case 9:\n              result = _context14.sent;\n\n              if (!request.signal.aborted) {\n                _context14.next = 13;\n                break;\n              }\n\n              method = isRouteRequest ? \"queryRoute\" : \"query\";\n              throw new Error(method + \"() call aborted\");\n\n            case 13:\n              if (!isRedirectResult(result)) {\n                _context14.next = 15;\n                break;\n              }\n\n              throw new Response(null, {\n                status: result.status,\n                headers: {\n                  Location: result.location\n                }\n              });\n\n            case 15:\n              if (!isDeferredResult(result)) {\n                _context14.next = 20;\n                break;\n              }\n\n              _error5 = getInternalRouterError(400, {\n                type: \"defer-action\"\n              });\n\n              if (!isRouteRequest) {\n                _context14.next = 19;\n                break;\n              }\n\n              throw _error5;\n\n            case 19:\n              result = {\n                type: ResultType.error,\n                error: _error5\n              };\n\n            case 20:\n              if (!isRouteRequest) {\n                _context14.next = 24;\n                break;\n              }\n\n              if (!isErrorResult(result)) {\n                _context14.next = 23;\n                break;\n              }\n\n              throw result.error;\n\n            case 23:\n              return _context14.abrupt(\"return\", {\n                matches: [actionMatch],\n                loaderData: {},\n                actionData: _defineProperty({}, actionMatch.route.id, result.data),\n                errors: null,\n                // Note: statusCode + headers are unused here since queryRoute will\n                // return the raw Response or value\n                statusCode: 200,\n                loaderHeaders: {},\n                actionHeaders: {},\n                activeDeferreds: null\n              });\n\n            case 24:\n              if (!isErrorResult(result)) {\n                _context14.next = 30;\n                break;\n              }\n\n              // Store off the pending error - we use it to determine which loaders\n              // to call and will commit it when we complete the navigation\n              boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n              _context14.next = 28;\n              return loadRouteData(request, matches, requestContext, undefined, _defineProperty({}, boundaryMatch.route.id, result.error));\n\n            case 28:\n              _context13 = _context14.sent;\n              return _context14.abrupt(\"return\", _extends({}, _context13, {\n                statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n                actionData: null,\n                actionHeaders: _extends({}, result.headers ? _defineProperty({}, actionMatch.route.id, result.headers) : {})\n              }));\n\n            case 30:\n              // Create a GET request for the loaders\n              loaderRequest = new Request(request.url, {\n                headers: request.headers,\n                redirect: request.redirect,\n                signal: request.signal\n              });\n              _context14.next = 33;\n              return loadRouteData(loaderRequest, matches, requestContext);\n\n            case 33:\n              context = _context14.sent;\n              return _context14.abrupt(\"return\", _extends({}, context, result.statusCode ? {\n                statusCode: result.statusCode\n              } : {}, {\n                actionData: _defineProperty({}, actionMatch.route.id, result.data),\n                actionHeaders: _extends({}, result.headers ? _defineProperty({}, actionMatch.route.id, result.headers) : {})\n              }));\n\n            case 35:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, _callee13);\n    }));\n    return _submit.apply(this, arguments);\n  }\n\n  function loadRouteData(_x54, _x55, _x56, _x57, _x58) {\n    return _loadRouteData.apply(this, arguments);\n  }\n\n  function _loadRouteData() {\n    _loadRouteData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(request, matches, requestContext, routeMatch, pendingActionError) {\n      var isRouteRequest, requestMatches, matchesToLoad, results, method, activeDeferreds, context, executedLoaders;\n      return _regeneratorRuntime().wrap(function _callee14$(_context15) {\n        while (1) {\n          switch (_context15.prev = _context15.next) {\n            case 0:\n              isRouteRequest = routeMatch != null; // Short circuit if we have no loaders to run (queryRoute())\n\n              if (!(isRouteRequest && !(routeMatch != null && routeMatch.route.loader) && !(routeMatch != null && routeMatch.route.lazy))) {\n                _context15.next = 3;\n                break;\n              }\n\n              throw getInternalRouterError(400, {\n                method: request.method,\n                pathname: new URL(request.url).pathname,\n                routeId: routeMatch == null ? void 0 : routeMatch.route.id\n              });\n\n            case 3:\n              requestMatches = routeMatch ? [routeMatch] : getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]);\n              matchesToLoad = requestMatches.filter(function (m) {\n                return m.route.loader || m.route.lazy;\n              }); // Short circuit if we have no loaders to run (query())\n\n              if (!(matchesToLoad.length === 0)) {\n                _context15.next = 7;\n                break;\n              }\n\n              return _context15.abrupt(\"return\", {\n                matches: matches,\n                // Add a null for all matched routes for proper revalidation on the client\n                loaderData: matches.reduce(function (acc, m) {\n                  return Object.assign(acc, _defineProperty({}, m.route.id, null));\n                }, {}),\n                errors: pendingActionError || null,\n                statusCode: 200,\n                loaderHeaders: {},\n                activeDeferreds: null\n              });\n\n            case 7:\n              _context15.next = 9;\n              return Promise.all(_toConsumableArray(matchesToLoad.map(function (match) {\n                return callLoaderOrAction(\"loader\", request, match, matches, manifest, detectErrorBoundary, basename, true, isRouteRequest, requestContext);\n              })));\n\n            case 9:\n              results = _context15.sent;\n\n              if (!request.signal.aborted) {\n                _context15.next = 13;\n                break;\n              }\n\n              method = isRouteRequest ? \"queryRoute\" : \"query\";\n              throw new Error(method + \"() call aborted\");\n\n            case 13:\n              // Process and commit output from loaders\n              activeDeferreds = new Map();\n              context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError, activeDeferreds); // Add a null for any non-loader matches for proper revalidation on the client\n\n              executedLoaders = new Set(matchesToLoad.map(function (match) {\n                return match.route.id;\n              }));\n              matches.forEach(function (match) {\n                if (!executedLoaders.has(match.route.id)) {\n                  context.loaderData[match.route.id] = null;\n                }\n              });\n              return _context15.abrupt(\"return\", _extends({}, context, {\n                matches: matches,\n                activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null\n              }));\n\n            case 18:\n            case \"end\":\n              return _context15.stop();\n          }\n        }\n      }, _callee14);\n    }));\n    return _loadRouteData.apply(this, arguments);\n  }\n\n  return {\n    dataRoutes: dataRoutes,\n    query: query,\n    queryRoute: queryRoute\n  };\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\r\n * Given an existing StaticHandlerContext and an error thrown at render time,\r\n * provide an updated StaticHandlerContext suitable for a second SSR render\r\n */\n\n\nfunction getStaticContextFromError(routes, context, error) {\n  var newContext = _extends({}, context, {\n    statusCode: 500,\n    errors: _defineProperty({}, context._deepestRenderedBoundaryId || routes[0].id, error)\n  });\n\n  return newContext;\n}\n\nfunction isSubmissionNavigation(opts) {\n  return opts != null && \"formData\" in opts;\n} // Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\n\n\nfunction normalizeNavigateOptions(to, opts, isFetcher) {\n  if (isFetcher === void 0) {\n    isFetcher = false;\n  }\n\n  var path = typeof to === \"string\" ? to : createPath(to); // Return location verbatim on non-submission navigations\n\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path: path\n    };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path: path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  } // Create a Submission on non-GET navigations\n\n\n  var submission;\n\n  if (opts.formData) {\n    submission = {\n      formMethod: opts.formMethod || \"get\",\n      formAction: stripHashFromPath(path),\n      formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n      formData: opts.formData\n    };\n\n    if (isMutationMethod(submission.formMethod)) {\n      return {\n        path: path,\n        submission: submission\n      };\n    }\n  } // Flatten submission onto URLSearchParams for GET submissions\n\n\n  var parsedPath = parsePath(path);\n  var searchParams = convertFormDataToSearchParams(opts.formData); // Since fetcher GET submissions only run a single loader (as opposed to\n  // navigation GET submissions which run all loaders), we need to preserve\n  // any incoming ?index params\n\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n\n  parsedPath.search = \"?\" + searchParams;\n  return {\n    path: createPath(parsedPath),\n    submission: submission\n  };\n} // Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\n\n\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  var boundaryMatches = matches;\n\n  if (boundaryId) {\n    var index = matches.findIndex(function (m) {\n      return m.route.id === boundaryId;\n    });\n\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(history, state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, fetchLoadMatches, routesToUse, basename, pendingActionData, pendingError) {\n  var actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : undefined;\n  var currentUrl = history.createURL(state.location);\n  var nextUrl = history.createURL(location);\n  var defaultShouldRevalidate = // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n  isRevalidationRequired || // Clicked the same link, resubmitted a GET form\n  currentUrl.toString() === nextUrl.toString() || // Search params affect all loaders\n  currentUrl.search !== nextUrl.search; // Pick navigation matches that are net-new or qualify for revalidation\n\n  var boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  var boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  var navigationMatches = boundaryMatches.filter(function (match, index) {\n    if (match.route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n\n    if (match.route.loader == null) {\n      return false;\n    } // Always call the loader on new route instances and pending defer cancellations\n\n\n    if (isNewLoader(state.loaderData, state.matches[index], match) || cancelledDeferredRoutes.some(function (id) {\n      return id === match.route.id;\n    })) {\n      return true;\n    } // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n\n\n    var currentRouteMatch = state.matches[index];\n    var nextRouteMatch = match;\n    return shouldRevalidateLoader(match, _extends({\n      currentUrl: currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl: nextUrl,\n      nextParams: nextRouteMatch.params\n    }, submission, {\n      actionResult: actionResult,\n      defaultShouldRevalidate: defaultShouldRevalidate || isNewRouteInstance(currentRouteMatch, nextRouteMatch)\n    }));\n  }); // Pick fetcher.loads that need to be revalidated\n\n  var revalidatingFetchers = [];\n  fetchLoadMatches.forEach(function (f, key) {\n    // Don't revalidate if fetcher won't be present in the subsequent render\n    if (!matches.some(function (m) {\n      return m.route.id === f.routeId;\n    })) {\n      return;\n    }\n\n    var fetcherMatches = matchRoutes(routesToUse, f.path, basename); // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData\n\n    if (!fetcherMatches) {\n      revalidatingFetchers.push(_extends({\n        key: key\n      }, f, {\n        matches: null,\n        match: null\n      }));\n      return;\n    }\n\n    var fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n\n    if (cancelledFetcherLoads.includes(key)) {\n      revalidatingFetchers.push(_extends({\n        key: key,\n        matches: fetcherMatches,\n        match: fetcherMatch\n      }, f));\n      return;\n    } // Revalidating fetchers are decoupled from the route matches since they\n    // hit a static href, so they _always_ check shouldRevalidate and the\n    // default is strictly if a revalidation is explicitly required (action\n    // submissions, useRevalidator, X-Remix-Revalidate).\n\n\n    var shouldRevalidate = shouldRevalidateLoader(fetcherMatch, _extends({\n      currentUrl: currentUrl,\n      currentParams: state.matches[state.matches.length - 1].params,\n      nextUrl: nextUrl,\n      nextParams: matches[matches.length - 1].params\n    }, submission, {\n      actionResult: actionResult,\n      defaultShouldRevalidate: defaultShouldRevalidate\n    }));\n\n    if (shouldRevalidate) {\n      revalidatingFetchers.push(_extends({\n        key: key,\n        matches: fetcherMatches,\n        match: fetcherMatch\n      }, f));\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  var isNew = // [a] -> [a, b]\n  !currentMatch || // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id; // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n\n  var isMissingData = currentLoaderData[match.route.id] === undefined; // Always load if this is a net-new route or we don't yet have data\n\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(currentMatch, match) {\n  var currentPath = currentMatch.route.path;\n  return (// param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname || // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath != null && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\n\nfunction shouldRevalidateLoader(loaderMatch, arg) {\n  if (loaderMatch.route.shouldRevalidate) {\n    var routeChoice = loaderMatch.route.shouldRevalidate(arg);\n\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n/**\r\n * Execute route.lazy() methods to lazily load route modules (loader, action,\r\n * shouldRevalidate) and update the routeManifest in place which shares objects\r\n * with dataRoutes so those get updated as well.\r\n */\n\n\nfunction loadLazyRouteModule(_x59, _x60, _x61) {\n  return _loadLazyRouteModule.apply(this, arguments);\n}\n\nfunction _loadLazyRouteModule() {\n  _loadLazyRouteModule = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15(route, detectErrorBoundary, manifest) {\n    var lazyRoute, routeToUpdate, routeUpdates, lazyRouteProperty, staticRouteValue, isPropertyStaticallyDefined;\n    return _regeneratorRuntime().wrap(function _callee15$(_context16) {\n      while (1) {\n        switch (_context16.prev = _context16.next) {\n          case 0:\n            if (route.lazy) {\n              _context16.next = 2;\n              break;\n            }\n\n            return _context16.abrupt(\"return\");\n\n          case 2:\n            _context16.next = 4;\n            return route.lazy();\n\n          case 4:\n            lazyRoute = _context16.sent;\n\n            if (route.lazy) {\n              _context16.next = 7;\n              break;\n            }\n\n            return _context16.abrupt(\"return\");\n\n          case 7:\n            routeToUpdate = manifest[route.id];\n            invariant(routeToUpdate, \"No route found in manifest\"); // Update the route in place.  This should be safe because there's no way\n            // we could yet be sitting on this route as we can't get there without\n            // resolving lazy() first.\n            //\n            // This is different than the HMR \"update\" use-case where we may actively be\n            // on the route being updated.  The main concern boils down to \"does this\n            // mutation affect any ongoing navigations or any current state.matches\n            // values?\".  If not, it should be safe to update in place.\n\n            routeUpdates = {};\n\n            for (lazyRouteProperty in lazyRoute) {\n              staticRouteValue = routeToUpdate[lazyRouteProperty];\n              isPropertyStaticallyDefined = staticRouteValue !== undefined && // This property isn't static since it should always be updated based\n              // on the route updates\n              lazyRouteProperty !== \"hasErrorBoundary\";\n              warning(!isPropertyStaticallyDefined, \"Route \\\"\" + routeToUpdate.id + \"\\\" has a static property \\\"\" + lazyRouteProperty + \"\\\" \" + \"defined but its lazy function is also returning a value for this property. \" + (\"The lazy route property \\\"\" + lazyRouteProperty + \"\\\" will be ignored.\"));\n\n              if (!isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty)) {\n                routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];\n              }\n            } // Mutate the route with the provided updates.  Do this first so we pass\n            // the updated version to detectErrorBoundary\n\n\n            Object.assign(routeToUpdate, routeUpdates); // Mutate the `hasErrorBoundary` property on the route based on the route\n            // updates and remove the `lazy` function so we don't resolve the lazy\n            // route again.\n\n            Object.assign(routeToUpdate, {\n              // To keep things framework agnostic, we use the provided\n              // `detectErrorBoundary` function to set the `hasErrorBoundary` route\n              // property since the logic will differ between frameworks.\n              hasErrorBoundary: detectErrorBoundary(_extends({}, routeToUpdate)),\n              lazy: undefined\n            });\n\n          case 13:\n          case \"end\":\n            return _context16.stop();\n        }\n      }\n    }, _callee15);\n  }));\n  return _loadLazyRouteModule.apply(this, arguments);\n}\n\nfunction callLoaderOrAction(_x62, _x63, _x64, _x65, _x66, _x67, _x68, _x69, _x70, _x71) {\n  return _callLoaderOrAction.apply(this, arguments);\n} // Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\n\n\nfunction _callLoaderOrAction() {\n  _callLoaderOrAction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16(type, request, match, matches, manifest, detectErrorBoundary, basename, isStaticRequest, isRouteRequest, requestContext) {\n    var resultType, result, onReject, runHandler, handler, values, status, location, activeMatches, routePathnames, resolvedLocation, path, currentUrl, url, isSameBasename, data, contentType, _result$init, _result$init2;\n\n    return _regeneratorRuntime().wrap(function _callee16$(_context17) {\n      while (1) {\n        switch (_context17.prev = _context17.next) {\n          case 0:\n            if (basename === void 0) {\n              basename = \"/\";\n            }\n\n            if (isStaticRequest === void 0) {\n              isStaticRequest = false;\n            }\n\n            if (isRouteRequest === void 0) {\n              isRouteRequest = false;\n            }\n\n            runHandler = function runHandler(handler) {\n              // Setup a promise we can race against so that abort signals short circuit\n              var reject;\n              var abortPromise = new Promise(function (_, r) {\n                return reject = r;\n              });\n\n              onReject = function onReject() {\n                return reject();\n              };\n\n              request.signal.addEventListener(\"abort\", onReject);\n              return Promise.race([handler({\n                request: request,\n                params: match.params,\n                context: requestContext\n              }), abortPromise]);\n            };\n\n            _context17.prev = 4;\n            handler = match.route[type];\n\n            if (!match.route.lazy) {\n              _context17.next = 30;\n              break;\n            }\n\n            if (!handler) {\n              _context17.next = 14;\n              break;\n            }\n\n            _context17.next = 10;\n            return Promise.all([runHandler(handler), loadLazyRouteModule(match.route, detectErrorBoundary, manifest)]);\n\n          case 10:\n            values = _context17.sent;\n            result = values[0];\n            _context17.next = 28;\n            break;\n\n          case 14:\n            _context17.next = 16;\n            return loadLazyRouteModule(match.route, detectErrorBoundary, manifest);\n\n          case 16:\n            handler = match.route[type];\n\n            if (!handler) {\n              _context17.next = 23;\n              break;\n            }\n\n            _context17.next = 20;\n            return runHandler(handler);\n\n          case 20:\n            result = _context17.sent;\n            _context17.next = 28;\n            break;\n\n          case 23:\n            if (!(type === \"action\")) {\n              _context17.next = 27;\n              break;\n            }\n\n            throw getInternalRouterError(405, {\n              method: request.method,\n              pathname: new URL(request.url).pathname,\n              routeId: match.route.id\n            });\n\n          case 27:\n            return _context17.abrupt(\"return\", {\n              type: ResultType.data,\n              data: undefined\n            });\n\n          case 28:\n            _context17.next = 34;\n            break;\n\n          case 30:\n            invariant(handler, \"Could not find the \" + type + \" to run on the \\\"\" + match.route.id + \"\\\" route\");\n            _context17.next = 33;\n            return runHandler(handler);\n\n          case 33:\n            result = _context17.sent;\n\n          case 34:\n            invariant(result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n            _context17.next = 41;\n            break;\n\n          case 37:\n            _context17.prev = 37;\n            _context17.t0 = _context17[\"catch\"](4);\n            resultType = ResultType.error;\n            result = _context17.t0;\n\n          case 41:\n            _context17.prev = 41;\n\n            if (onReject) {\n              request.signal.removeEventListener(\"abort\", onReject);\n            }\n\n            return _context17.finish(41);\n\n          case 44:\n            if (!isResponse(result)) {\n              _context17.next = 69;\n              break;\n            }\n\n            status = result.status; // Process redirects\n\n            if (!redirectStatusCodes.has(status)) {\n              _context17.next = 54;\n              break;\n            }\n\n            location = result.headers.get(\"Location\");\n            invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\"); // Support relative routing in internal redirects\n\n            if (!ABSOLUTE_URL_REGEX.test(location)) {\n              activeMatches = matches.slice(0, matches.indexOf(match) + 1);\n              routePathnames = getPathContributingMatches(activeMatches).map(function (match) {\n                return match.pathnameBase;\n              });\n              resolvedLocation = resolveTo(location, routePathnames, new URL(request.url).pathname);\n              invariant(createPath(resolvedLocation), \"Unable to resolve redirect location: \" + location); // Prepend the basename to the redirect location if we have one\n\n              if (basename) {\n                path = resolvedLocation.pathname;\n                resolvedLocation.pathname = path === \"/\" ? basename : joinPaths([basename, path]);\n              }\n\n              location = createPath(resolvedLocation);\n            } else if (!isStaticRequest) {\n              // Strip off the protocol+origin for same-origin + same-basename absolute\n              // redirects. If this is a static request, we can let it go back to the\n              // browser as-is\n              currentUrl = new URL(request.url);\n              url = location.startsWith(\"//\") ? new URL(currentUrl.protocol + location) : new URL(location);\n              isSameBasename = stripBasename(url.pathname, basename) != null;\n\n              if (url.origin === currentUrl.origin && isSameBasename) {\n                location = url.pathname + url.search + url.hash;\n              }\n            } // Don't process redirects in the router during static requests requests.\n            // Instead, throw the Response and let the server handle it with an HTTP\n            // redirect.  We also update the Location header in place in this flow so\n            // basename and relative routing is taken into account\n\n\n            if (!isStaticRequest) {\n              _context17.next = 53;\n              break;\n            }\n\n            result.headers.set(\"Location\", location);\n            throw result;\n\n          case 53:\n            return _context17.abrupt(\"return\", {\n              type: ResultType.redirect,\n              status: status,\n              location: location,\n              revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null\n            });\n\n          case 54:\n            if (!isRouteRequest) {\n              _context17.next = 56;\n              break;\n            }\n\n            throw {\n              type: resultType || ResultType.data,\n              response: result\n            };\n\n          case 56:\n            contentType = result.headers.get(\"Content-Type\"); // Check between word boundaries instead of startsWith() due to the last\n            // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n\n            if (!(contentType && /\\bapplication\\/json\\b/.test(contentType))) {\n              _context17.next = 63;\n              break;\n            }\n\n            _context17.next = 60;\n            return result.json();\n\n          case 60:\n            data = _context17.sent;\n            _context17.next = 66;\n            break;\n\n          case 63:\n            _context17.next = 65;\n            return result.text();\n\n          case 65:\n            data = _context17.sent;\n\n          case 66:\n            if (!(resultType === ResultType.error)) {\n              _context17.next = 68;\n              break;\n            }\n\n            return _context17.abrupt(\"return\", {\n              type: resultType,\n              error: new ErrorResponse(status, result.statusText, data),\n              headers: result.headers\n            });\n\n          case 68:\n            return _context17.abrupt(\"return\", {\n              type: ResultType.data,\n              data: data,\n              statusCode: result.status,\n              headers: result.headers\n            });\n\n          case 69:\n            if (!(resultType === ResultType.error)) {\n              _context17.next = 71;\n              break;\n            }\n\n            return _context17.abrupt(\"return\", {\n              type: resultType,\n              error: result\n            });\n\n          case 71:\n            if (!(result instanceof DeferredData)) {\n              _context17.next = 73;\n              break;\n            }\n\n            return _context17.abrupt(\"return\", {\n              type: ResultType.deferred,\n              deferredData: result,\n              statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status,\n              headers: ((_result$init2 = result.init) == null ? void 0 : _result$init2.headers) && new Headers(result.init.headers)\n            });\n\n          case 73:\n            return _context17.abrupt(\"return\", {\n              type: ResultType.data,\n              data: result\n            });\n\n          case 74:\n          case \"end\":\n            return _context17.stop();\n        }\n      }\n    }, _callee16, null, [[4, 37, 41, 44]]);\n  }));\n  return _callLoaderOrAction.apply(this, arguments);\n}\n\nfunction createClientSideRequest(history, location, signal, submission) {\n  var url = history.createURL(stripHashFromPath(location)).toString();\n  var init = {\n    signal: signal\n  };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    var formMethod = submission.formMethod,\n        formEncType = submission.formEncType,\n        formData = submission.formData;\n    init.method = formMethod.toUpperCase();\n    init.body = formEncType === \"application/x-www-form-urlencoded\" ? convertFormDataToSearchParams(formData) : formData;\n  } // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData) {\n  var searchParams = new URLSearchParams();\n\n  var _iterator6 = _createForOfIteratorHelper(formData.entries()),\n      _step6;\n\n  try {\n    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n      var _step6$value = _slicedToArray(_step6.value, 2),\n          key = _step6$value[0],\n          value = _step6$value[1];\n\n      // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n      searchParams.append(key, value instanceof File ? value.name : value);\n    }\n  } catch (err) {\n    _iterator6.e(err);\n  } finally {\n    _iterator6.f();\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  var loaderData = {};\n  var errors = null;\n  var statusCode;\n  var foundError = false;\n  var loaderHeaders = {}; // Process loader results into state.loaderData/state.errors\n\n  results.forEach(function (result, index) {\n    var id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      var boundaryMatch = findNearestBoundary(matches, id);\n      var error = result.error; // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = errors || {}; // Prefer higher error values if lower errors bubble to the same boundary\n\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      } // Clear our any prior loaderData for the throwing route\n\n\n      loaderData[id] = undefined; // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      } // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n\n\n      if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  }); // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n\n  return {\n    loaderData: loaderData,\n    errors: errors,\n    statusCode: statusCode || 200,\n    loaderHeaders: loaderHeaders\n  };\n}\n\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  var _processRouteLoaderDa = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds),\n      loaderData = _processRouteLoaderDa.loaderData,\n      errors = _processRouteLoaderDa.errors; // Process results from our revalidating fetchers\n\n\n  for (var index = 0; index < revalidatingFetchers.length; index++) {\n    var _revalidatingFetchers = revalidatingFetchers[index],\n        key = _revalidatingFetchers.key,\n        match = _revalidatingFetchers.match;\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    var result = fetcherResults[index]; // Process fetcher non-redirect errors\n\n    if (isErrorResult(result)) {\n      var boundaryMatch = findNearestBoundary(state.matches, match == null ? void 0 : match.route.id);\n\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, _defineProperty({}, boundaryMatch.route.id, result.error));\n      }\n\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      var doneFetcher = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return {\n    loaderData: loaderData,\n    errors: errors\n  };\n}\n\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  var mergedLoaderData = _extends({}, newLoaderData);\n\n  var _iterator7 = _createForOfIteratorHelper(matches),\n      _step7;\n\n  try {\n    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n      var match = _step7.value;\n      var id = match.route.id;\n\n      if (newLoaderData.hasOwnProperty(id)) {\n        if (newLoaderData[id] !== undefined) {\n          mergedLoaderData[id] = newLoaderData[id];\n        }\n      } else if (loaderData[id] !== undefined && match.route.loader) {\n        // Preserve existing keys not included in newLoaderData and where a loader\n        // wasn't removed by HMR\n        mergedLoaderData[id] = loaderData[id];\n      }\n\n      if (errors && errors.hasOwnProperty(id)) {\n        // Don't keep any loader data below the boundary\n        break;\n      }\n    }\n  } catch (err) {\n    _iterator7.e(err);\n  } finally {\n    _iterator7.f();\n  }\n\n  return mergedLoaderData;\n} // Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\n\n\nfunction findNearestBoundary(matches, routeId) {\n  var eligibleMatches = routeId ? matches.slice(0, matches.findIndex(function (m) {\n    return m.route.id === routeId;\n  }) + 1) : _toConsumableArray(matches);\n  return eligibleMatches.reverse().find(function (m) {\n    return m.route.hasErrorBoundary === true;\n  }) || matches[0];\n}\n\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  var route = routes.find(function (r) {\n    return r.index || !r.path || r.path === \"/\";\n  }) || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route: route\n    }],\n    route: route\n  };\n}\n\nfunction getInternalRouterError(status, _temp4) {\n  var _ref11 = _temp4 === void 0 ? {} : _temp4,\n      pathname = _ref11.pathname,\n      routeId = _ref11.routeId,\n      method = _ref11.method,\n      type = _ref11.type;\n\n  var statusText = \"Unknown Server Error\";\n  var errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n\n  return new ErrorResponse(status || 500, statusText, new Error(errorMessage), true);\n} // Find any returned redirect errors, starting from the lowest match\n\n\nfunction findRedirect(results) {\n  for (var i = results.length - 1; i >= 0; i--) {\n    var result = results[i];\n\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\nfunction stripHashFromPath(path) {\n  var parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\n\nfunction isHashChangeOnly(a, b) {\n  return a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash;\n}\n\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\n\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\n\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  var status = result.status;\n  var location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj) {\n  return obj && isResponse(obj.response) && (obj.type === ResultType.data || ResultType.error);\n}\n\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method);\n}\n\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method);\n}\n\nfunction resolveDeferredResults(_x72, _x73, _x74, _x75, _x76, _x77) {\n  return _resolveDeferredResults.apply(this, arguments);\n}\n\nfunction _resolveDeferredResults() {\n  _resolveDeferredResults = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17(currentMatches, matchesToLoad, results, signal, isFetcher, currentLoaderData) {\n    var _loop, index, _ret;\n\n    return _regeneratorRuntime().wrap(function _callee17$(_context19) {\n      while (1) {\n        switch (_context19.prev = _context19.next) {\n          case 0:\n            _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop(index) {\n              var result, match, currentMatch, isRevalidatingLoader;\n              return _regeneratorRuntime().wrap(function _loop$(_context18) {\n                while (1) {\n                  switch (_context18.prev = _context18.next) {\n                    case 0:\n                      result = results[index];\n                      match = matchesToLoad[index]; // If we don't have a match, then we can have a deferred result to do\n                      // anything with.  This is for revalidating fetchers where the route was\n                      // removed during HMR\n\n                      if (match) {\n                        _context18.next = 4;\n                        break;\n                      }\n\n                      return _context18.abrupt(\"return\", \"continue\");\n\n                    case 4:\n                      currentMatch = currentMatches.find(function (m) {\n                        return m.route.id === match.route.id;\n                      });\n                      isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n                      if (!(isDeferredResult(result) && (isFetcher || isRevalidatingLoader))) {\n                        _context18.next = 9;\n                        break;\n                      }\n\n                      _context18.next = 9;\n                      return resolveDeferredData(result, signal, isFetcher).then(function (result) {\n                        if (result) {\n                          results[index] = result || results[index];\n                        }\n                      });\n\n                    case 9:\n                    case \"end\":\n                      return _context18.stop();\n                  }\n                }\n              }, _loop);\n            });\n            index = 0;\n\n          case 2:\n            if (!(index < results.length)) {\n              _context19.next = 10;\n              break;\n            }\n\n            return _context19.delegateYield(_loop(index), \"t0\", 4);\n\n          case 4:\n            _ret = _context19.t0;\n\n            if (!(_ret === \"continue\")) {\n              _context19.next = 7;\n              break;\n            }\n\n            return _context19.abrupt(\"continue\", 7);\n\n          case 7:\n            index++;\n            _context19.next = 2;\n            break;\n\n          case 10:\n          case \"end\":\n            return _context19.stop();\n        }\n      }\n    }, _callee17);\n  }));\n  return _resolveDeferredResults.apply(this, arguments);\n}\n\nfunction resolveDeferredData(_x78, _x79, _x80) {\n  return _resolveDeferredData.apply(this, arguments);\n}\n\nfunction _resolveDeferredData() {\n  _resolveDeferredData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee18(result, signal, unwrap) {\n    var aborted;\n    return _regeneratorRuntime().wrap(function _callee18$(_context20) {\n      while (1) {\n        switch (_context20.prev = _context20.next) {\n          case 0:\n            if (unwrap === void 0) {\n              unwrap = false;\n            }\n\n            _context20.next = 3;\n            return result.deferredData.resolveData(signal);\n\n          case 3:\n            aborted = _context20.sent;\n\n            if (!aborted) {\n              _context20.next = 6;\n              break;\n            }\n\n            return _context20.abrupt(\"return\");\n\n          case 6:\n            if (!unwrap) {\n              _context20.next = 14;\n              break;\n            }\n\n            _context20.prev = 7;\n            return _context20.abrupt(\"return\", {\n              type: ResultType.data,\n              data: result.deferredData.unwrappedData\n            });\n\n          case 11:\n            _context20.prev = 11;\n            _context20.t0 = _context20[\"catch\"](7);\n            return _context20.abrupt(\"return\", {\n              type: ResultType.error,\n              error: _context20.t0\n            });\n\n          case 14:\n            return _context20.abrupt(\"return\", {\n              type: ResultType.data,\n              data: result.deferredData.data\n            });\n\n          case 15:\n          case \"end\":\n            return _context20.stop();\n        }\n      }\n    }, _callee18, null, [[7, 11]]);\n  }));\n  return _resolveDeferredData.apply(this, arguments);\n}\n\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(function (v) {\n    return v === \"\";\n  });\n} // Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\n\n\nfunction createUseMatchesMatch(match, loaderData) {\n  var route = match.route,\n      pathname = match.pathname,\n      params = match.params;\n  return {\n    id: route.id,\n    pathname: pathname,\n    params: params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\n\nfunction getTargetMatch(matches, location) {\n  var search = typeof location === \"string\" ? parsePath(location).search : location.search;\n\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  } // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n\n\n  var pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n} //#endregion\n\n\nexport { AbortedDeferredError, Action, ErrorResponse, IDLE_BLOCKER, IDLE_FETCHER, IDLE_NAVIGATION, UNSAFE_DEFERRED_SYMBOL, DeferredData as UNSAFE_DeferredData, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, getPathContributingMatches as UNSAFE_getPathContributingMatches, invariant as UNSAFE_invariant, warning as UNSAFE_warning, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, createStaticHandler, defer, generatePath, getStaticContextFromError, getToPathname, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, resolvePath, resolveTo, stripBasename };","map":{"version":3,"mappings":"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","names":["Action","PopStateEventType","options","initialEntries","initialIndex","v5Compat","entries","map","entry","index","createMemoryLocation","state","undefined","clampIndex","length","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","key","location","createLocation","pathname","warning","charAt","JSON","stringify","createHref","createPath","history","createURL","URL","encodeLocation","path","parsePath","search","hash","push","Push","nextLocation","splice","delta","replace","Replace","go","nextIndex","listen","fn","createBrowserLocation","window","globalHistory","usr","createBrowserHref","getUrlBasedHistory","createHashLocation","substr","createHashHref","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","validateHashLocation","value","message","Error","cond","console","warn","e","createKey","random","toString","getHistoryState","idx","current","_ref","parsedPath","searchIndex","getLocation","validateLocation","defaultView","getIndex","replaceState","handlePop","historyState","pushState","error","assign","origin","invariant","addEventListener","removeEventListener","ResultType","immutableRouteKeys","Set","isIndexRoute","route","convertRoutesToDataRoutes","routes","detectErrorBoundary","parentPath","manifest","treePath","id","join","children","indexRoute","hasErrorBoundary","pathOrLayoutRoute","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","i","matchRouteBranch","safelyDecodeURI","parentsMeta","flattenRoute","relativePath","meta","caseSensitive","childrenIndex","startsWith","joinPaths","routesMeta","concat","score","computeScore","forEach","includes","explodeOptionalSegments","exploded","segments","split","first","rest","isOptional","endsWith","required","restExploded","result","subpath","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","initialScore","some","filter","reduce","segment","test","siblings","every","branch","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","Object","params","pathnameBase","normalizePathname","generatePath","originalPath","prefix","array","isLastSegment","star","starParam","keyMatch","optional","param","pattern","compilePath","matcher","paramNames","captureGroups","memo","paramName","splatValue","safelyDecodeURIComponent","regexpSource","_","RegExp","decodeURI","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","getInvalidPathError","char","field","dest","getPathContributingMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","isEmptyPath","from","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","data","init","responseInit","status","headers","Headers","has","set","Response","AbortedDeferredError","DeferredData","constructor","deferredKeys","Array","isArray","reject","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","acc","trackPromise","done","pendingKeysSet","add","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","emit","settledKey","subscribers","subscriber","subscribe","cancel","abort","v","k","resolve","size","unwrapTrackedPromise","isTrackedPromise","_tracked","_error","_data","defer","redirect","ErrorResponse","statusText","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","IDLE_FETCHER","IDLE_BLOCKER","proceed","reset","ABSOLUTE_URL_REGEX","isBrowser","createElement","isServer","defaultDetectErrorBoundary","Boolean","createRouter","dataRoutes","inFlightDataRoutes","unlistenHistory","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","hydrationData","initialMatches","initialErrors","getInternalRouterError","getShortCircuitMatches","initialized","m","lazy","loader","router","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","loaderData","actionData","errors","fetchers","Map","blockers","pendingAction","HistoryAction","pendingPreventScrollReset","pendingNavigationController","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeDeferreds","blockerFunctions","ignoreNextHistoryUpdate","initialize","blockerKey","shouldBlockNavigation","currentLocation","updateBlocker","deleteBlocker","updateState","startNavigation","lazyMatches","lazyPromises","loadLazyRouteModule","all","dispose","clear","deleteFetcher","newState","completeNavigation","isActionReload","isMutationMethod","_isRedirect","keys","mergeLoaderData","getSavedScrollPosition","navigate","opts","normalizeNavigateOptions","submission","userReplace","pendingError","revalidate","interruptActiveLoads","startUninterruptedRevalidation","overrideNavigation","saveScrollPosition","routesToUse","loadingNavigation","notFoundMatches","cancelActiveDeferreds","isHashChangeOnly","request","createClientSideRequest","findNearestBoundary","handleAction","actionOutput","shortCircuited","pendingActionData","pendingActionError","_extends","Request","handleLoaders","actionMatch","getTargetMatch","type","method","routeId","callLoaderOrAction","isRedirectResult","startRedirectNavigation","isErrorResult","boundaryMatch","isDeferredResult","activeSubmission","getMatchesToLoad","matchesToLoad","revalidatingFetchers","rf","fetcher","revalidatingFetcher","callLoadersAndMaybeResolveData","results","loaderResults","fetcherResults","findRedirect","processLoaderData","deferredData","markFetchRedirectsDone","didAbortFetchLoads","abortStaleFetchLoads","getFetcher","fetch","abortFetcher","setFetcherError","handleFetcherAction","handleFetcherLoader","requestMatches","existingFetcher","abortController","fetchRequest","actionResult","loadingFetcher","isFetchActionRedirect","revalidationRequest","loadId","loadFetcher","staleKey","doneFetcher","resolveDeferredData","_temp","redirectLocation","_isFetchActionRedirect","_window","isDifferentBasename","redirectHistoryAction","currentMatches","fetchersToLoad","f","resolveDeferredResults","markFetchersDone","doneKeys","landedId","yeetedKeys","getBlocker","blocker","newBlocker","_ref2","blockerFunction","predicate","cancelledRouteIds","dfd","enableScrollRestoration","positions","getPosition","getKey","y","userMatches","createUseMatchesMatch","_internalSetRoutes","newRoutes","_internalFetchControllers","_internalActiveDeferreds","UNSAFE_DEFERRED_SYMBOL","Symbol","query","_temp2","requestContext","isValidMethod","methodNotAllowedMatches","statusCode","loaderHeaders","actionHeaders","queryImpl","isResponse","queryRoute","_temp3","find","values","routeMatch","submit","loadRouteData","isQueryRouteResponse","isRedirectResponse","response","isRouteRequest","Location","context","loaderRequest","getLoaderMatchesUntilBoundary","processRouteLoaderData","executedLoaders","fromEntries","getStaticContextFromError","newContext","_deepestRenderedBoundaryId","isSubmissionNavigation","isFetcher","stripHashFromPath","searchParams","convertFormDataToSearchParams","hasNakedIndexQuery","append","boundaryId","boundaryMatches","findIndex","currentUrl","nextUrl","defaultShouldRevalidate","navigationMatches","isNewLoader","currentRouteMatch","nextRouteMatch","shouldRevalidateLoader","currentParams","nextParams","isNewRouteInstance","fetcherMatches","fetcherMatch","shouldRevalidate","currentLoaderData","currentMatch","isNew","isMissingData","currentPath","loaderMatch","arg","routeChoice","lazyRoute","routeToUpdate","routeUpdates","lazyRouteProperty","staticRouteValue","isPropertyStaticallyDefined","isStaticRequest","runHandler","handler","onReject","resultType","activeMatches","resolvedLocation","protocol","isSameBasename","contentType","text","deferred","_result$init","toUpperCase","body","URLSearchParams","File","name","foundError","newLoaderData","mergedLoaderData","hasOwnProperty","eligibleMatches","reverse","_temp4","errorMessage","obj","isRevalidatingLoader","unwrap","resolveData","unwrappedData","getAll","handle","pathMatches"],"sources":["C:\\Users\\Asus\\Desktop\\deplo2\\Lf-deployment\\node_modules\\@remix-run\\router\\history.ts","C:\\Users\\Asus\\Desktop\\deplo2\\Lf-deployment\\node_modules\\@remix-run\\router\\utils.ts","C:\\Users\\Asus\\Desktop\\deplo2\\Lf-deployment\\node_modules\\@remix-run\\router\\router.ts"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: any;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n\n  /**\n   * The delta between this location and the former location in the history stack\n   */\n  delta: number | null;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. May be either a URL or the pieces of a\n * URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Returns a URL for the given `to` value\n   *\n   * @param to - The destination URL\n   */\n  createURL(to: To): URL;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n  idx: number;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  function createHref(to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 1 });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 0 });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({ action, location: nextLocation, delta });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nexport function warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location, index: number): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  let index = getIndex()!;\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, \"\");\n  }\n\n  function getIndex(): number {\n    let state = globalHistory.state || { idx: null };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({ action, location: history.location, delta });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 1 });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 0 });\n    }\n  }\n\n  function createURL(to: To): URL {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base =\n      window.location.origin !== \"null\"\n        ? window.location.origin\n        : window.location.href;\n\n    let href = typeof to === \"string\" ? to : createPath(to);\n    invariant(\n      base,\n      `No window.location.(origin|href) available to create URL for href: ${href}`\n    );\n    return new URL(href, base);\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { warning, invariant, parsePath } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: any;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  status: number;\n  location: string;\n  revalidate: boolean;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: any;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\nexport type MutationFormMethod = \"post\" | \"put\" | \"patch\" | \"delete\";\nexport type FormMethod = \"get\" | MutationFormMethod;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\";\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport interface Submission {\n  formMethod: FormMethod;\n  formAction: string;\n  formEncType: FormEncType;\n  formData: FormData;\n}\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs {\n  request: Request;\n  params: Params;\n  context?: any;\n}\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Route loader function signature\n */\nexport interface LoaderFunction {\n  (args: LoaderFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction {\n  (args: ActionFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: {\n    currentUrl: URL;\n    currentParams: AgnosticDataRouteMatch[\"params\"];\n    nextUrl: URL;\n    nextParams: AgnosticDataRouteMatch[\"params\"];\n    formMethod?: Submission[\"formMethod\"];\n    formAction?: Submission[\"formAction\"];\n    formEncType?: Submission[\"formEncType\"];\n    formData?: Submission[\"formData\"];\n    actionResult?: DataResult;\n    defaultShouldRevalidate: boolean;\n  }): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set `hasErrorBoundary`\n * from the framework-aware `errorElement` prop\n */\nexport interface DetectErrorBoundaryFunction {\n  (route: AgnosticRouteObject): boolean;\n}\n\n/**\n * Keys we cannot change from within a lazy() function. We spread all other keys\n * onto the route. Either they're meaningful to the router, or they'll get\n * ignored.\n */\nexport type ImmutableRouteKey =\n  | \"lazy\"\n  | \"caseSensitive\"\n  | \"path\"\n  | \"id\"\n  | \"index\"\n  | \"children\";\n\nexport const immutableRouteKeys = new Set<ImmutableRouteKey>([\n  \"lazy\",\n  \"caseSensitive\",\n  \"path\",\n  \"id\",\n  \"index\",\n  \"children\",\n]);\n\n/**\n * lazy() function to load a route definition, which can add non-matching\n * related properties to a route\n */\nexport interface LazyRouteFunction<R extends AgnosticRouteObject> {\n  (): Promise<Omit<R, ImmutableRouteKey>>;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction;\n  action?: ActionFunction;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n  lazy?: LazyRouteFunction<AgnosticBaseRouteObject>;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\nexport type RouteManifest = Record<string, AgnosticDataRouteObject | undefined>;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `:${infer Param}`\n    ? Param extends `${infer Optional}?`\n      ? Optional\n      : Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\ntype PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\" | \"/*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  detectErrorBoundary: DetectErrorBoundaryFunction,\n  parentPath: number[] = [],\n  manifest: RouteManifest = {}\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !manifest[id],\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = {\n        ...route,\n        hasErrorBoundary: detectErrorBoundary(route),\n        id,\n      };\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        id,\n        hasErrorBoundary: detectErrorBoundary(route),\n        children: undefined,\n      };\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(\n          route.children,\n          detectErrorBoundary,\n          treePath,\n          manifest\n        );\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch<string, RouteObjectType>(\n      branches[i],\n      // Incoming pathnames are generally encoded from either window.location\n      // or from router.navigate, but we want to match against the unencoded\n      // paths in the route definitions.  Memory router locations won't be\n      // encoded here but there also shouldn't be anything to decode so this\n      // should be a safe operation.  This avoids needing matchRoutes to be\n      // history-aware.\n      safelyDecodeURI(pathname)\n    );\n  }\n\n  return matches;\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  let flattenRoute = (\n    route: RouteObjectType,\n    index: number,\n    relativePath?: string\n  ) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath:\n        relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta,\n    });\n  };\n  routes.forEach((route, index) => {\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !route.path?.includes(\"?\")) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n\n  return branches;\n}\n\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path: string): string[] {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  let [first, ...rest] = segments;\n\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n\n  let result: string[] = [];\n\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explodes _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(\n    ...restExploded.map((subpath) =>\n      subpath === \"\" ? required : [required, subpath].join(\"/\")\n    )\n  );\n\n  // Then if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map((exploded) =>\n    path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded\n  );\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  originalPath: Path,\n  params: {\n    [key in PathParam<Path>]: string | null;\n  } = {} as any\n): string {\n  let path: string = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(\n      false,\n      `Route path \"${path}\" will be treated as if it were ` +\n        `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n        `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n        `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n    );\n    path = path.replace(/\\*$/, \"/*\") as Path;\n  }\n\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n\n  const segments = path\n    .split(/\\/+/)\n    .map((segment, index, array) => {\n      const isLastSegment = index === array.length - 1;\n\n      // only apply the splat if it's the last segment\n      if (isLastSegment && segment === \"*\") {\n        const star = \"*\" as PathParam<Path>;\n        const starParam = params[star];\n\n        // Apply the splat\n        return starParam;\n      }\n\n      const keyMatch = segment.match(/^:(\\w+)(\\??)$/);\n      if (keyMatch) {\n        const [, key, optional] = keyMatch;\n        let param = params[key as PathParam<Path>];\n\n        if (optional === \"?\") {\n          return param == null ? \"\" : param;\n        }\n\n        if (param == null) {\n          invariant(false, `Missing \":${key}\" param`);\n        }\n\n        return param;\n      }\n\n      // Remove any optional markers from optional static segments\n      return segment.replace(/\\?$/g, \"\");\n    })\n    // Remove empty segments\n    .filter((segment) => !!segment);\n\n  return prefix + segments.join(\"/\");\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, paramNames] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = paramNames.reduce<Mutable<Params>>(\n    (memo, paramName, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      memo[paramName] = safelyDecodeURIComponent(\n        captureGroups[index] || \"\",\n        paramName\n      );\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, string[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let paramNames: string[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/\\/:(\\w+)/g, (_: string, paramName: string) => {\n        paramNames.push(paramName);\n        return \"/([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value: string) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeysSet: Set<string> = new Set<string>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscribers: Set<(aborted: boolean, settledKey?: string) => void> =\n    new Set();\n  data: Record<string, unknown>;\n  init?: ResponseInit;\n  deferredKeys: string[] = [];\n\n  constructor(data: Record<string, unknown>, responseInit?: ResponseInit) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  private trackPromise(\n    key: string,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, null, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    if (error) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    this.emit(false, key);\n    return data;\n  }\n\n  private emit(aborted: boolean, settledKey?: string) {\n    this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn: (aborted: boolean, settledKey?: string) => void) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport type DeferFunction = (\n  data: Record<string, unknown>,\n  init?: number | ResponseInit\n) => DeferredData;\n\nexport const defer: DeferFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  return new DeferredData(data, responseInit);\n};\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nexport class ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n  error?: Error;\n  internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nexport function isRouteErrorResponse(error: any): error is ErrorResponse {\n  return (\n    error != null &&\n    typeof error.status === \"number\" &&\n    typeof error.statusText === \"string\" &&\n    typeof error.internal === \"boolean\" &&\n    \"data\" in error\n  );\n}\n","import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  invariant,\n  parsePath,\n  warning,\n} from \"./history\";\nimport type {\n  DataResult,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DeferredResult,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  DetectErrorBoundaryFunction,\n  RedirectResult,\n  RouteData,\n  AgnosticRouteObject,\n  Submission,\n  SuccessResult,\n  AgnosticRouteMatch,\n  MutationFormMethod,\n  ShouldRevalidateFunction,\n  RouteManifest,\n  ImmutableRouteKey,\n  ActionFunction,\n  LoaderFunction,\n} from \"./utils\";\nimport {\n  DeferredData,\n  ErrorResponse,\n  ResultType,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  immutableRouteKeys,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  resolveTo,\n  stripBasename,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): Promise<void>;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To, opts?: RouterNavigateOptions): Promise<void>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterNavigateOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key?: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key?: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get a navigation blocker\n   * @param key The identifier for the blocker\n   * @param fn The blocker function implementation\n   */\n  getBlocker(key: string, fn: BlockerFunction): Blocker;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete a navigation blocker\n   * @param key The identifier for the blocker\n   */\n  deleteBlocker(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * HMR needs to pass in-flight route updates to React Router\n   * TODO: Replace this with granular route update APIs (addRoute, updateRoute, deleteRoute)\n   */\n  _internalSetRoutes(routes: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n\n  /**\n   * Map of current blockers\n   */\n  blockers: Map<string, Blocker>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  basename?: string;\n  routes: AgnosticRouteObject[];\n  history: History;\n  hydrationData?: HydrationState;\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  activeDeferreds: Record<string, DeferredData> | null;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(\n    request: Request,\n    opts?: { requestContext?: unknown }\n  ): Promise<StaticHandlerContext | Response>;\n  queryRoute(\n    request: Request,\n    opts?: { routeId?: string; requestContext?: unknown }\n  ): Promise<any>;\n}\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (state: RouterState): void;\n}\n\ninterface UseMatchesMatch {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: unknown;\n  handle: unknown;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UseMatchesMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\n/**\n * Options for a navigate() call for a Link navigation\n */\ntype LinkNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n};\n\n/**\n * Options for a navigate() call for a Form navigation\n */\ntype SubmissionNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n  formMethod?: FormMethod;\n  formEncType?: FormEncType;\n  formData: FormData;\n};\n\n/**\n * Options to pass to navigate() for either a Link or Form navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions =\n  | Omit<LinkNavigateOptions, \"replace\">\n  | Omit<SubmissionNavigateOptions, \"replace\">;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface BlockerBlocked {\n  state: \"blocked\";\n  reset(): void;\n  proceed(): void;\n  location: Location;\n}\n\ninterface BlockerUnblocked {\n  state: \"unblocked\";\n  reset: undefined;\n  proceed: undefined;\n  location: undefined;\n}\n\ninterface BlockerProceeding {\n  state: \"proceeding\";\n  reset: undefined;\n  proceed: undefined;\n  location: Location;\n}\n\nexport type Blocker = BlockerUnblocked | BlockerBlocked | BlockerProceeding;\n\nexport type BlockerFunction = (args: {\n  currentLocation: Location;\n  nextLocation: Location;\n  historyAction: HistoryAction;\n}) => boolean;\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Error thrown from the current action, keyed by the route containing the\n   * error boundary to render the error.  To be committed to the state after\n   * loaders have completed\n   */\n  pendingActionError?: RouteData;\n  /**\n   * Data returned from the current action, keyed by the route owning the action.\n   * To be committed to the state after loaders have completed\n   */\n  pendingActionData?: RouteData;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Cached info for active fetcher.load() instances so they can participate\n * in revalidation\n */\ninterface FetchLoadMatch {\n  routeId: string;\n  path: string;\n}\n\n/**\n * Identified fetcher.load() calls that need to be revalidated\n */\ninterface RevalidatingFetcher extends FetchLoadMatch {\n  key: string;\n  match: AgnosticDataRouteMatch | null;\n  matches: AgnosticDataRouteMatch[] | null;\n}\n\n/**\n * Wrapper object to allow us to throw any response out from callLoaderOrAction\n * for queryRouter while preserving whether or not it was thrown or returned\n * from the loader/action\n */\ninterface QueryRouteResponse {\n  type: ResultType.data | ResultType.error;\n  response: Response;\n}\n\nconst validMutationMethodsArr: MutationFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validMutationMethods = new Set<MutationFormMethod>(\n  validMutationMethodsArr\n);\n\nconst validRequestMethodsArr: FormMethod[] = [\n  \"get\",\n  ...validMutationMethodsArr,\n];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_BLOCKER: BlockerUnblocked = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined,\n};\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nconst isBrowser =\n  typeof window !== \"undefined\" &&\n  typeof window.document !== \"undefined\" &&\n  typeof window.document.createElement !== \"undefined\";\nconst isServer = !isBrowser;\n\nconst defaultDetectErrorBoundary = (route: AgnosticRouteObject) =>\n  Boolean(route.hasErrorBoundary);\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let detectErrorBoundary =\n    init.detectErrorBoundary || defaultDetectErrorBoundary;\n\n  // Routes keyed by ID\n  let manifest: RouteManifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(\n    init.routes,\n    detectErrorBoundary,\n    undefined,\n    manifest\n  );\n  let inFlightDataRoutes: AgnosticDataRouteObject[] | undefined;\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n\n  let initialMatches = matchRoutes(\n    dataRoutes,\n    init.history.location,\n    init.basename\n  );\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  let initialized =\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    !initialMatches.some((m) => m.route.lazy) &&\n    // And we have to either have no loaders or have been provided hydrationData\n    (!initialMatches.some((m) => m.route.loader) || init.hydrationData != null);\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: string[] = [];\n\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n\n  // Fetchers that triggered redirect navigations from their actions\n  let fetchRedirectIds = new Set<string>();\n\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map<string, BlockerFunction>();\n\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let ignoreNextHistoryUpdate = false;\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location, delta }) => {\n        // Ignore this event if it was just us resetting the URL from a\n        // blocked POP navigation\n        if (ignoreNextHistoryUpdate) {\n          ignoreNextHistoryUpdate = false;\n          return;\n        }\n\n        warning(\n          blockerFunctions.size === 0 || delta != null,\n          \"You are trying to use a blocker on a POP navigation to a location \" +\n            \"that was not created by @remix-run/router. This will fail silently in \" +\n            \"production. This can happen if you are navigating outside the router \" +\n            \"via `window.history.pushState`/`window.location.hash` instead of using \" +\n            \"router navigation APIs.  This can also happen if you are using \" +\n            \"createHashRouter and the user manually changes the URL.\"\n        );\n\n        let blockerKey = shouldBlockNavigation({\n          currentLocation: state.location,\n          nextLocation: location,\n          historyAction,\n        });\n\n        if (blockerKey && delta != null) {\n          // Restore the URL to match the current UI, but don't update router state\n          ignoreNextHistoryUpdate = true;\n          init.history.go(delta * -1);\n\n          // Put the blocker into a blocked state\n          updateBlocker(blockerKey, {\n            state: \"blocked\",\n            location,\n            proceed() {\n              updateBlocker(blockerKey!, {\n                state: \"proceeding\",\n                proceed: undefined,\n                reset: undefined,\n                location,\n              });\n              // Re-do the same POP navigation we just blocked\n              init.history.go(delta);\n            },\n            reset() {\n              deleteBlocker(blockerKey!);\n              updateState({ blockers: new Map(router.state.blockers) });\n            },\n          });\n          return;\n        }\n\n        return startNavigation(historyAction, location);\n      }\n    );\n\n    if (state.initialized) {\n      return router;\n    }\n\n    let lazyMatches = state.matches.filter((m) => m.route.lazy);\n\n    if (lazyMatches.length === 0) {\n      // Kick off initial data load if needed.  Use Pop to avoid modifying history\n      startNavigation(HistoryAction.Pop, state.location);\n      return router;\n    }\n\n    // Load lazy modules, then kick off initial data load if needed\n    let lazyPromises = lazyMatches.map((m) =>\n      loadLazyRouteModule(m.route, detectErrorBoundary, manifest)\n    );\n    Promise.all(lazyPromises).then(() => {\n      let initialized =\n        !state.matches.some((m) => m.route.loader) ||\n        init.hydrationData != null;\n      if (initialized) {\n        // We already have required loaderData so we can just set initialized\n        updateState({ initialized: true });\n      } else {\n        // We still need to kick off initial data loads\n        startNavigation(HistoryAction.Pop, state.location);\n      }\n    });\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(newState: Partial<RouterState>): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n    subscribers.forEach((subscriber) => subscriber(state));\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      isMutationMethod(state.navigation.formMethod) &&\n      state.navigation.state === \"loading\" &&\n      location.state?._isRedirect !== true;\n\n    let actionData: RouteData | null;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData\n      ? mergeLoaderData(\n          state.loaderData,\n          newState.loaderData,\n          newState.matches || [],\n          newState.errors\n        )\n      : state.loaderData;\n\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    for (let [key] of blockerFunctions) {\n      deleteBlocker(key);\n    }\n\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset =\n      pendingPreventScrollReset === true ||\n      (state.navigation.formMethod != null &&\n        isMutationMethod(state.navigation.formMethod) &&\n        location.state?._isRedirect !== true);\n\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    updateState({\n      ...newState, // matches, errors, fetchers go through as-is\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(\n        location,\n        newState.matches || state.matches\n      ),\n      preventScrollReset,\n      blockers: new Map(state.blockers),\n    });\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(to, opts);\n\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = {\n      ...nextLocation,\n      ...init.history.encodeLocation(nextLocation),\n    };\n\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n\n    let historyAction = HistoryAction.Push;\n\n    if (userReplace === true) {\n      historyAction = HistoryAction.Replace;\n    } else if (userReplace === false) {\n      // no-op\n    } else if (\n      submission != null &&\n      isMutationMethod(submission.formMethod) &&\n      submission.formAction === state.location.pathname + state.location.search\n    ) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = HistoryAction.Replace;\n    }\n\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction,\n    });\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey!, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation,\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          deleteBlocker(blockerKey!);\n          updateState({ blockers: new Map(state.blockers) });\n        },\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      submission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponse;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, init.basename);\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(routesToUse);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error,\n        },\n      });\n      return;\n    }\n\n    // Short circuit if it's only a hash change and not a mutation submission\n    // For example, on /page#hash and submit a <Form method=\"post\"> which will\n    // default to a navigation to /page\n    if (\n      isHashChangeOnly(state.location, location) &&\n      !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))\n    ) {\n      completeNavigation(location, { matches });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      init.history,\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionData: RouteData | undefined;\n    let pendingError: RouteData | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError,\n      };\n    } else if (\n      opts &&\n      opts.submission &&\n      isMutationMethod(opts.submission.formMethod)\n    ) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace }\n      );\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        ...opts.submission,\n      };\n      loadingNavigation = navigation;\n\n      // Create a GET request for the loaders\n      request = new Request(request.url, { signal: request.signal });\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      request,\n      location,\n      matches,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.replace,\n      pendingActionData,\n      pendingError\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches,\n      ...(pendingActionData ? { actionData: pendingActionData } : {}),\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    opts?: { replace?: boolean }\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation: NavigationStates[\"Submitting\"] = {\n      state: \"submitting\",\n      location,\n      ...submission,\n    };\n    updateState({ navigation });\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        manifest,\n        detectErrorBoundary,\n        router.basename\n      );\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace: boolean;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace =\n          result.location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(state, result, { submission, replace });\n      return { shortCircuited: true };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: { [boundaryMatch.route.id]: result.error },\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    return {\n      pendingActionData: { [actionMatch.route.id]: result.data },\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    replace?: boolean,\n    pendingActionData?: RouteData,\n    pendingError?: RouteData\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n    if (!loadingNavigation) {\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        ...submission,\n      };\n      loadingNavigation = navigation;\n    }\n\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission = submission\n      ? submission\n      : loadingNavigation.formMethod &&\n        loadingNavigation.formAction &&\n        loadingNavigation.formData &&\n        loadingNavigation.formEncType\n      ? {\n          formMethod: loadingNavigation.formMethod,\n          formAction: loadingNavigation.formAction,\n          formData: loadingNavigation.formData,\n          formEncType: loadingNavigation.formEncType,\n        }\n      : undefined;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      activeSubmission,\n      location,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      fetchLoadMatches,\n      routesToUse,\n      init.basename,\n      pendingActionData,\n      pendingError\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(location, {\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null,\n        ...(pendingActionData ? { actionData: pendingActionData } : {}),\n      });\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach((rf) => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true,\n        };\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState({\n        navigation: loadingNavigation,\n        ...(actionData\n          ? Object.keys(actionData).length === 0\n            ? { actionData: null }\n            : { actionData }\n          : {}),\n        ...(revalidatingFetchers.length > 0\n          ? { fetchers: new Map(state.fetchers) }\n          : {}),\n      });\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach((rf) =>\n      fetchControllers.set(rf.key, pendingNavigationController!)\n    );\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      await startRedirectNavigation(state, redirect, { replace });\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingError,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n\n    return {\n      loaderData,\n      errors,\n      ...(didAbortFetchLoads || revalidatingFetchers.length > 0\n        ? { fetchers: new Map(state.fetchers) }\n        : {}),\n    };\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches = matchRoutes(routesToUse, href, init.basename);\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: href })\n      );\n      return;\n    }\n\n    let { path, submission } = normalizeNavigateOptions(href, opts, true);\n    let match = getTargetMatch(matches, path);\n\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, { routeId, path });\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action && !match.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId,\n      });\n      setFetcherError(key, routeId, error);\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    let fetcher: FetcherStates[\"Submitting\"] = {\n      state: \"submitting\",\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, fetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal,\n      submission\n    );\n    fetchControllers.set(key, abortController);\n\n    let actionResult = await callLoaderOrAction(\n      \"action\",\n      fetchRequest,\n      match,\n      requestMatches,\n      manifest,\n      detectErrorBoundary,\n      router.basename\n    );\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n      let loadingFetcher: FetcherStates[\"Loading\"] = {\n        state: \"loading\",\n        ...submission,\n        data: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, loadingFetcher);\n      updateState({ fetchers: new Map(state.fetchers) });\n\n      return startRedirectNavigation(state, actionResult, {\n        isFetchActionRedirect: true,\n      });\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      init.history,\n\n      nextLocation,\n      abortController.signal\n    );\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(routesToUse, state.navigation.location, init.basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      data: actionResult.data,\n      ...submission,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      submission,\n      nextLocation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      fetchLoadMatches,\n      routesToUse,\n      init.basename,\n      { [match.route.id]: actionResult.data },\n      undefined // No need to send through errors since we short circuit above\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter((rf) => rf.key !== key)\n      .forEach((rf) => {\n        let staleKey = rf.key;\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: existingFetcher && existingFetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true,\n        };\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        fetchControllers.set(staleKey, abortController);\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach((r) => fetchControllers.delete(r.key));\n\n    let redirect = findRedirect(results);\n    if (redirect) {\n      return startRedirectNavigation(state, redirect);\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, doneFetcher);\n\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(\n          state.loaderData,\n          loaderData,\n          matches,\n          errors\n        ),\n        ...(didAbortFetchLoads ? { fetchers: new Map(state.fetchers) } : {}),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[],\n    submission?: Submission\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    // Put this fetcher into it's loading state\n    let loadingFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, loadingFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal\n    );\n    fetchControllers.set(key, abortController);\n\n    let result: DataResult = await callLoaderOrAction(\n      \"loader\",\n      fetchRequest,\n      match,\n      matches,\n      manifest,\n      detectErrorBoundary,\n      router.basename\n    );\n\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by ou our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      await startRedirectNavigation(state, result);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key);\n      // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error,\n        },\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    state: RouterState,\n    redirect: RedirectResult,\n    {\n      submission,\n      replace,\n      isFetchActionRedirect,\n    }: {\n      submission?: Submission;\n      replace?: boolean;\n      isFetchActionRedirect?: boolean;\n    } = {}\n  ) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    let redirectLocation = createLocation(\n      state.location,\n      redirect.location,\n      // TODO: This can be removed once we get rid of useTransition in Remix v2\n      {\n        _isRedirect: true,\n        ...(isFetchActionRedirect ? { _isFetchActionRedirect: true } : {}),\n      }\n    );\n    invariant(\n      redirectLocation,\n      \"Expected a location on the redirect navigation\"\n    );\n    // Check if this an absolute external redirect that goes to a new origin\n    if (\n      ABSOLUTE_URL_REGEX.test(redirect.location) &&\n      isBrowser &&\n      typeof window?.location !== \"undefined\"\n    ) {\n      let url = init.history.createURL(redirect.location);\n      let isDifferentBasename =\n        stripBasename(url.pathname, init.basename || \"/\") == null;\n\n      if (window.location.origin !== url.origin || isDifferentBasename) {\n        if (replace) {\n          window.location.replace(redirect.location);\n        } else {\n          window.location.assign(redirect.location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true ? HistoryAction.Replace : HistoryAction.Push;\n\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let { formMethod, formAction, formEncType, formData } = state.navigation;\n    if (!submission && formMethod && formAction && formData && formEncType) {\n      submission = {\n        formMethod,\n        formAction,\n        formEncType,\n        formData,\n      };\n    }\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.status) &&\n      submission &&\n      isMutationMethod(submission.formMethod)\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          ...submission,\n          formAction: redirect.location,\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    } else {\n      // Otherwise, we kick off a new loading navigation, preserving the\n      // submission info for the duration of this navigation\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: submission ? submission.formMethod : undefined,\n          formAction: submission ? submission.formAction : undefined,\n          formEncType: submission ? submission.formEncType : undefined,\n          formData: submission ? submission.formData : undefined,\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    currentMatches: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          manifest,\n          detectErrorBoundary,\n          router.basename\n        )\n      ),\n      ...fetchersToLoad.map((f) => {\n        if (f.matches && f.match) {\n          return callLoaderOrAction(\n            \"loader\",\n            createClientSideRequest(init.history, f.path, request.signal),\n            f.match,\n            f.matches,\n            manifest,\n            detectErrorBoundary,\n            router.basename\n          );\n        } else {\n          let error: ErrorResult = {\n            type: ResultType.error,\n            error: getInternalRouterError(404, { pathname: f.path }),\n          };\n          return error;\n        }\n      }),\n    ]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    await Promise.all([\n      resolveDeferredResults(\n        currentMatches,\n        matchesToLoad,\n        loaderResults,\n        request.signal,\n        false,\n        state.loaderData\n      ),\n      resolveDeferredResults(\n        currentMatches,\n        fetchersToLoad.map((f) => f.match),\n        fetcherResults,\n        request.signal,\n        true\n      ),\n    ]);\n\n    return { results, loaderResults, fetcherResults };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key: string, routeId: string, error: any) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error,\n      },\n      fetchers: new Map(state.fetchers),\n    });\n  }\n\n  function deleteFetcher(key: string): void {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): void {\n    let doneKeys = [];\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key: string, fn: BlockerFunction) {\n    let blocker: Blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key: string) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key: string, newBlocker: Blocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(\n      (blocker.state === \"unblocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"proceeding\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"unblocked\") ||\n        (blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\"),\n      `Invalid blocker state transition: ${blocker.state} -> ${newBlocker.state}`\n    );\n\n    state.blockers.set(key, newBlocker);\n    updateState({ blockers: new Map(state.blockers) });\n  }\n\n  function shouldBlockNavigation({\n    currentLocation,\n    nextLocation,\n    historyAction,\n  }: {\n    currentLocation: Location;\n    nextLocation: Location;\n    historyAction: HistoryAction;\n  }): string | undefined {\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({ currentLocation, nextLocation, historyAction })) {\n      return blockerKey;\n    }\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || ((location) => location.key);\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  function _internalSetRoutes(newRoutes: AgnosticDataRouteObject[]) {\n    inFlightDataRoutes = newRoutes;\n  }\n\n  router = {\n    get basename() {\n      return init.basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport const UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\nexport interface CreateStaticHandlerOptions {\n  basename?: string;\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n}\n\nexport function createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: CreateStaticHandlerOptions\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to createStaticHandler\"\n  );\n\n  let manifest: RouteManifest = {};\n  let detectErrorBoundary =\n    opts?.detectErrorBoundary || defaultDetectErrorBoundary;\n  let dataRoutes = convertRoutesToDataRoutes(\n    routes,\n    detectErrorBoundary,\n    undefined,\n    manifest\n  );\n  let basename = (opts ? opts.basename : null) || \"/\";\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(\n    request: Request,\n    { requestContext }: { requestContext?: unknown } = {}\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method.toLowerCase();\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"head\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext);\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  async function queryRoute(\n    request: Request,\n    {\n      routeId,\n      requestContext,\n    }: { requestContext?: unknown; routeId?: string } = {}\n  ): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method.toLowerCase();\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"head\" && method !== \"options\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      match\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      let data = Object.values(result.loaderData)[0];\n      if (result.activeDeferreds?.[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        routeMatch\n      );\n      return isResponse(result)\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    requestContext: unknown,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        manifest,\n        detectErrorBoundary,\n        basename,\n        true,\n        isRouteRequest,\n        requestContext\n      );\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(`${method}() call aborted`);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, { type: \"defer-action\" });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        undefined,\n        {\n          [boundaryMatch.route.id]: result.error,\n        }\n      );\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal,\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n\n    return {\n      ...context,\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      actionHeaders: {\n        ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n      },\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch,\n    pendingActionError?: RouteData\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (\n      isRouteRequest &&\n      !routeMatch?.route.loader &&\n      !routeMatch?.route.lazy\n    ) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : getLoaderMatchesUntilBoundary(\n          matches,\n          Object.keys(pendingActionError || {})[0]\n        );\n    let matchesToLoad = requestMatches.filter(\n      (m) => m.route.loader || m.route.lazy\n    );\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce(\n          (acc, m) => Object.assign(acc, { [m.route.id]: null }),\n          {}\n        ),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          manifest,\n          detectErrorBoundary,\n          basename,\n          true,\n          isRouteRequest,\n          requestContext\n        )\n      ),\n    ]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(`${method}() call aborted`);\n    }\n\n    // Process and commit output from loaders\n    let activeDeferreds = new Map<string, DeferredData>();\n    let context = processRouteLoaderData(\n      matches,\n      matchesToLoad,\n      results,\n      pendingActionError,\n      activeDeferreds\n    );\n\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set<string>(\n      matchesToLoad.map((match) => match.route.id)\n    );\n    matches.forEach((match) => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n\n    return {\n      ...context,\n      matches,\n      activeDeferreds:\n        activeDeferreds.size > 0\n          ? Object.fromEntries(activeDeferreds.entries())\n          : null,\n    };\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction isSubmissionNavigation(\n  opts: RouterNavigateOptions\n): opts is SubmissionNavigateOptions {\n  return opts != null && \"formData\" in opts;\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  to: To,\n  opts?: RouterNavigateOptions,\n  isFetcher = false\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponse;\n} {\n  let path = typeof to === \"string\" ? to : createPath(to);\n\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  // Create a Submission on non-GET navigations\n  let submission: Submission | undefined;\n  if (opts.formData) {\n    submission = {\n      formMethod: opts.formMethod || \"get\",\n      formAction: stripHashFromPath(path),\n      formEncType:\n        (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n      formData: opts.formData,\n    };\n\n    if (isMutationMethod(submission.formMethod)) {\n      return { path, submission };\n    }\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  let searchParams = convertFormDataToSearchParams(opts.formData);\n  // Since fetcher GET submissions only run a single loader (as opposed to\n  // navigation GET submissions which run all loaders), we need to preserve\n  // any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = `?${searchParams}`;\n\n  return { path: createPath(parsedPath), submission };\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId?: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  history: History,\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: string[],\n  fetchLoadMatches: Map<string, FetchLoadMatch>,\n  routesToUse: AgnosticDataRouteObject[],\n  basename: string | undefined,\n  pendingActionData?: RouteData,\n  pendingError?: RouteData\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingError\n    ? Object.values(pendingError)[0]\n    : pendingActionData\n    ? Object.values(pendingActionData)[0]\n    : undefined;\n\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n\n  let defaultShouldRevalidate =\n    // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n    isRevalidationRequired ||\n    // Clicked the same link, resubmitted a GET form\n    currentUrl.toString() === nextUrl.toString() ||\n    // Search params affect all loaders\n    currentUrl.search !== nextUrl.search;\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    if (match.route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n    if (match.route.loader == null) {\n      return false;\n    }\n\n    // Always call the loader on new route instances and pending defer cancellations\n    if (\n      isNewLoader(state.loaderData, state.matches[index], match) ||\n      cancelledDeferredRoutes.some((id) => id === match.route.id)\n    ) {\n      return true;\n    }\n\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n\n    return shouldRevalidateLoader(match, {\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate:\n        defaultShouldRevalidate ||\n        isNewRouteInstance(currentRouteMatch, nextRouteMatch),\n    });\n  });\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate if fetcher won't be present in the subsequent render\n    if (!matches.some((m) => m.route.id === f.routeId)) {\n      return;\n    }\n\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({ key, ...f, matches: null, match: null });\n      return;\n    }\n\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n\n    if (cancelledFetcherLoads.includes(key)) {\n      revalidatingFetchers.push({\n        key,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        ...f,\n      });\n      return;\n    }\n\n    // Revalidating fetchers are decoupled from the route matches since they\n    // hit a static href, so they _always_ check shouldRevalidate and the\n    // default is strictly if a revalidation is explicitly required (action\n    // submissions, useRevalidator, X-Remix-Revalidate).\n    let shouldRevalidate = shouldRevalidateLoader(fetcherMatch, {\n      currentUrl,\n      currentParams: state.matches[state.matches.length - 1].params,\n      nextUrl,\n      nextParams: matches[matches.length - 1].params,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate,\n    });\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        ...f,\n      });\n    }\n  });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath != null &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  loaderMatch: AgnosticDataRouteMatch,\n  arg: Parameters<ShouldRevalidateFunction>[0]\n) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(\n  route: AgnosticDataRouteObject,\n  detectErrorBoundary: DetectErrorBoundaryFunction,\n  manifest: RouteManifest\n) {\n  if (!route.lazy) {\n    return;\n  }\n\n  let lazyRoute = await route.lazy();\n\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates: Record<string, any> = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue =\n      routeToUpdate[lazyRouteProperty as keyof typeof routeToUpdate];\n\n    let isPropertyStaticallyDefined =\n      staticRouteValue !== undefined &&\n      // This property isn't static since it should always be updated based\n      // on the route updates\n      lazyRouteProperty !== \"hasErrorBoundary\";\n\n    warning(\n      !isPropertyStaticallyDefined,\n      `Route \"${routeToUpdate.id}\" has a static property \"${lazyRouteProperty}\" ` +\n        `defined but its lazy function is also returning a value for this property. ` +\n        `The lazy route property \"${lazyRouteProperty}\" will be ignored.`\n    );\n\n    if (\n      !isPropertyStaticallyDefined &&\n      !immutableRouteKeys.has(lazyRouteProperty as ImmutableRouteKey)\n    ) {\n      routeUpdates[lazyRouteProperty] =\n        lazyRoute[lazyRouteProperty as keyof typeof lazyRoute];\n    }\n  }\n\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to detectErrorBoundary\n  Object.assign(routeToUpdate, routeUpdates);\n\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, {\n    // To keep things framework agnostic, we use the provided\n    // `detectErrorBoundary` function to set the `hasErrorBoundary` route\n    // property since the logic will differ between frameworks.\n    hasErrorBoundary: detectErrorBoundary({ ...routeToUpdate }),\n    lazy: undefined,\n  });\n}\n\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  matches: AgnosticDataRouteMatch[],\n  manifest: RouteManifest,\n  detectErrorBoundary: DetectErrorBoundaryFunction,\n  basename = \"/\",\n  isStaticRequest: boolean = false,\n  isRouteRequest: boolean = false,\n  requestContext?: unknown\n): Promise<DataResult> {\n  let resultType;\n  let result;\n  let onReject: (() => void) | undefined;\n\n  let runHandler = (handler: ActionFunction | LoaderFunction) => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject: () => void;\n    let abortPromise = new Promise((_, r) => (reject = r));\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n    return Promise.race([\n      handler({ request, params: match.params, context: requestContext }),\n      abortPromise,\n    ]);\n  };\n\n  try {\n    let handler = match.route[type];\n\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let values = await Promise.all([\n          runHandler(handler),\n          loadLazyRouteModule(match.route, detectErrorBoundary, manifest),\n        ]);\n        result = values[0];\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, detectErrorBoundary, manifest);\n\n        handler = match.route[type];\n        if (handler) {\n          // Handler still run even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname: new URL(request.url).pathname,\n            routeId: match.route.id,\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return { type: ResultType.data, data: undefined };\n        }\n      }\n    } else {\n      invariant<Function>(\n        handler,\n        `Could not find the ${type} to run on the \"${match.route.id}\" route`\n      );\n\n      result = await runHandler(handler);\n    }\n\n    invariant(\n      result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n\n  if (isResponse(result)) {\n    let status = result.status;\n\n    // Process redirects\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(\n        location,\n        \"Redirects returned/thrown from loaders/actions must have a Location header\"\n      );\n\n      // Support relative routing in internal redirects\n      if (!ABSOLUTE_URL_REGEX.test(location)) {\n        let activeMatches = matches.slice(0, matches.indexOf(match) + 1);\n        let routePathnames = getPathContributingMatches(activeMatches).map(\n          (match) => match.pathnameBase\n        );\n        let resolvedLocation = resolveTo(\n          location,\n          routePathnames,\n          new URL(request.url).pathname\n        );\n        invariant(\n          createPath(resolvedLocation),\n          `Unable to resolve redirect location: ${location}`\n        );\n\n        // Prepend the basename to the redirect location if we have one\n        if (basename) {\n          let path = resolvedLocation.pathname;\n          resolvedLocation.pathname =\n            path === \"/\" ? basename : joinPaths([basename, path]);\n        }\n\n        location = createPath(resolvedLocation);\n      } else if (!isStaticRequest) {\n        // Strip off the protocol+origin for same-origin + same-basename absolute\n        // redirects. If this is a static request, we can let it go back to the\n        // browser as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith(\"//\")\n          ? new URL(currentUrl.protocol + location)\n          : new URL(location);\n        let isSameBasename = stripBasename(url.pathname, basename) != null;\n        if (url.origin === currentUrl.origin && isSameBasename) {\n          location = url.pathname + url.search + url.hash;\n        }\n      }\n\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n      };\n    }\n\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result,\n      };\n    }\n\n    let data: any;\n    let contentType = result.headers.get(\"Content-Type\");\n    // Check between word boundaries instead of startsWith() due to the last\n    // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n    if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return { type: resultType, error: result };\n  }\n\n  if (result instanceof DeferredData) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: result.init?.status,\n      headers: result.init?.headers && new Headers(result.init.headers),\n    };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(\n  history: History,\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let { formMethod, formEncType, formData } = submission;\n    init.method = formMethod.toUpperCase();\n    init.body =\n      formEncType === \"application/x-www-form-urlencoded\"\n        ? convertFormDataToSearchParams(formData)\n        : formData;\n  }\n\n  // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, value instanceof File ? value.name : value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = errors || {};\n\n      // Prefer higher error values if lower errors bubble to the same boundary\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      }\n\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      }\n\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (\n        result.statusCode != null &&\n        result.statusCode !== 200 &&\n        !foundError\n      ) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: DataResult[],\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    matchesToLoad,\n    results,\n    pendingError,\n    activeDeferreds\n  );\n\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let { key, match } = revalidatingFetchers[index];\n    invariant(\n      fetcherResults !== undefined && fetcherResults[index] !== undefined,\n      \"Did not find corresponding fetcher result\"\n    );\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match?.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[],\n  errors: RouteData | null | undefined\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      } else {\n        // No-op - this is so we ignore existing data if we have a key in the\n        // incoming object with an undefined value, which is how we unset a prior\n        // loaderData if we encounter a loader error\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n    id: `__shim-error-route__`,\n  };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n    type,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n    type?: \"defer-action\";\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponse(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results: DataResult[]): RedirectResult | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  return (\n    a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash\n  );\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nfunction isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj: any): obj is QueryRouteResponse {\n  return (\n    obj &&\n    isResponse(obj.response) &&\n    (obj.type === ResultType.data || ResultType.error)\n  );\n}\n\nfunction isValidMethod(method: string): method is FormMethod {\n  return validRequestMethods.has(method as FormMethod);\n}\n\nfunction isMutationMethod(method?: string): method is MutationFormMethod {\n  return validMutationMethods.has(method as MutationFormMethod);\n}\n\nasync function resolveDeferredResults(\n  currentMatches: AgnosticDataRouteMatch[],\n  matchesToLoad: (AgnosticDataRouteMatch | null)[],\n  results: DataResult[],\n  signal: AbortSignal,\n  isFetcher: boolean,\n  currentLoaderData?: RouteData\n) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match!.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, isFetcher).then((result) => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\n// Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\nfunction createUseMatchesMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UseMatchesMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id] as unknown,\n    handle: route.handle as unknown,\n  };\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n//#endregion\n"]},"metadata":{},"sourceType":"module"}